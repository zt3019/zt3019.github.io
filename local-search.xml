<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>shell介绍</title>
    <link href="/2021/05/11/shell_introduction/"/>
    <url>/2021/05/11/shell_introduction/</url>
    
    <content type="html"><![CDATA[<h1 id="shell介绍"><a href="#shell介绍" class="headerlink" title="shell介绍"></a>shell介绍</h1><h2 id="shell简介"><a href="#shell简介" class="headerlink" title="shell简介"></a>shell简介</h2><ul><li><p>shell是一个命令行解释器，它接受应用程序或者用户命令，然后调用操作系统内核</p></li><li><p>Linux提供的解释器有：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@hadoop101 ~]$ cat /etc/shells <br>/bin/sh<br>/bin/bash<br>/sbin/nologin<br>/bin/dash<br>/bin/tcsh<br>/bin/csh<br></code></pre></td></tr></table></figure></li><li><p>Centos默认的解析器是bash</p></li><li><p>bash和sh的关系：sh是引用了bash，最终sh实际上还是bash命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@hadoop101 bin]$ ll | grep bash<br>-rwxr-xr-x. 1 root root 941880 5月  11 2016 bash<br>lrwxrwxrwx. 1 root root      4 5月  27 2017 sh -&gt; bash<br></code></pre></td></tr></table></figure></li></ul><h2 id="shell脚本基本格式"><a href="#shell脚本基本格式" class="headerlink" title="shell脚本基本格式"></a>shell脚本基本格式</h2><ul><li><p>脚本以<font color=red>#!/bin/bash</font>开头</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@hadoop101 datas]$ touch helloworld.sh<br>[root@hadoop101 datas]$ vi helloworld.sh<br><br>在helloworld.sh中输入如下内容<br><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>echo &quot;helloworld&quot;<br></code></pre></td></tr></table></figure></li><li><p>执行方式</p><ul><li><p>采用bash或sh+脚本的相对路径或绝对路径（不用赋予脚本+x权限）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh helloworld.sh<br>bash helloworld.sh<br></code></pre></td></tr></table></figure></li><li><p>采用输入脚本的绝对路径或相对路径执行脚本（必须具有可执行权限+x）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x helloworld.sh<br></code></pre></td></tr></table></figure></li></ul></li><li><p>第一种执行方法，本质是bash解析器帮你执行脚本，所以脚本本身不需要执行权限。第二种执行方法，本质是脚本需要自己执行，所以需要执行权限。</p></li></ul><h2 id="shell中的变量"><a href="#shell中的变量" class="headerlink" title="shell中的变量"></a>shell中的变量</h2><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><ul><li><p>常用系统变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@hadoop101 datas]$ echo $HOME<br>/home/atguigu<br><span class="hljs-meta">#</span><span class="bash"> 常用系统变量 <span class="hljs-variable">$HOME</span>、<span class="hljs-variable">$PWD</span>、<span class="hljs-variable">$SHELL</span>、<span class="hljs-variable">$USER</span></span><br><span class="hljs-meta">#</span><span class="bash">显示当前shell中所有变量</span><br>set<br></code></pre></td></tr></table></figure></li></ul><h3 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h3><ul><li><p>（1）定义变量：变量=值 </p><p>（2）撤销变量：unset 变量</p><p>（3）声明静态变量：readonly变量，注意：不能unset</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@hadoop101 datas]$ A=5<br>[root@hadoop101 datas]$ echo $A<br>5<br>[root@hadoop101 datas]$ unset A<br>[root@hadoop101 datas]$ echo $A<br></code></pre></td></tr></table></figure></li></ul><h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-variable">$n</span>（功能描述：n为数字，<span class="hljs-variable">$0</span>代表该脚本名称，<span class="hljs-variable">$1</span>-<span class="hljs-variable">$9</span>代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如<span class="hljs-variable">$&#123;10&#125;</span>）</span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-variable">$#</span>（功能描述：获取所有输入参数个数，常用于循环）。</span><br><span class="hljs-meta">#</span><span class="bash">$*（功能描述：这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体）</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-variable">$@</span>（功能描述：这个变量也代表命令行中所有的参数，不过<span class="hljs-variable">$@</span>把每个参数区分对待）</span><br><span class="hljs-meta">#</span><span class="bash"> $？（功能描述：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。）</span><br><br></code></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">（1）“$((运算式))”或“$[运算式]”</span><br><span class="hljs-meta">#</span><span class="bash">（2）expr  + , - , \*,  /,  %    加，减，乘，除，取余</span><br><span class="hljs-meta">#</span><span class="bash">注意：expr运算符间要有空格</span><br>expr 2 + 3<br></code></pre></td></tr></table></figure><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">[ condition ]（注意condition前后要有空格）</span><br><span class="hljs-meta">#</span><span class="bash">注意：条件非空即为<span class="hljs-literal">true</span>，[ atguigu ]返回<span class="hljs-literal">true</span>，[] 返回<span class="hljs-literal">false</span>。</span><br><span class="hljs-meta">#</span><span class="bash">两个整数之间比较</span><br><span class="hljs-meta">#</span><span class="bash">2. 常用判断条件</span><br><span class="hljs-meta">#</span><span class="bash">（1）两个整数之间比较</span><br><span class="hljs-meta">#</span><span class="bash">= 字符串比较</span><br><span class="hljs-meta">#</span><span class="bash">-lt 小于（less than）-le 小于等于（less equal）</span><br><span class="hljs-meta">#</span><span class="bash">-eq 等于（equal）-gt 大于（greater than）</span><br><span class="hljs-meta">#</span><span class="bash">-ge 大于等于（greater equal）-ne 不等于（Not equal）</span><br><span class="hljs-meta">#</span><span class="bash">（2）按照文件权限进行判断</span><br><span class="hljs-meta">#</span><span class="bash">-r 有读的权限（<span class="hljs-built_in">read</span>）-w 有写的权限（write）</span><br><span class="hljs-meta">#</span><span class="bash">-x 有执行的权限（execute）</span><br><span class="hljs-meta">#</span><span class="bash">（3）按照文件类型进行判断</span><br><span class="hljs-meta">#</span><span class="bash">-f 文件存在并且是一个常规的文件（file）</span><br><span class="hljs-meta">#</span><span class="bash">-e 文件存在（existence）-d 文件存在并是一个目录（directory）</span><br></code></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><ul><li>if语句</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">（1）[ 条件判断式 ]，中括号和条件判断式之间必须有空格</span><br><span class="hljs-meta">#</span><span class="bash">（2）<span class="hljs-keyword">if</span>后要有空格</span><br><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>if [ $1 -eq &quot;1&quot; ]<br>then<br>        echo &quot;banzhang zhen shuai&quot;<br>elif [ $1 -eq &quot;2&quot; ]<br>then<br>        echo &quot;cls zhen mei&quot;<br>fi<br><br></code></pre></td></tr></table></figure><ul><li><p>case语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">1)<span class="hljs-keyword">case</span>行尾必须为单词“<span class="hljs-keyword">in</span>”，每一个模式匹配必须以右括号“）”结束。</span><br><span class="hljs-meta">#</span><span class="bash">2)双分号“;;”表示命令序列结束，相当于java中的<span class="hljs-built_in">break</span>。</span><br><span class="hljs-meta">#</span><span class="bash">3)最后的“*）”表示默认模式，相当于java中的default。</span><br><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>case $1 in<br>&quot;1&quot;)<br>        echo &quot;banzhang&quot;<br>;;<br><br>&quot;2&quot;)<br>        echo &quot;cls&quot;<br>;;<br>*)<br>        echo &quot;renyao&quot;<br>;;<br>esac<br></code></pre></td></tr></table></figure></li><li><p>for循环</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 基本语法一：</span><br><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>s=0<br>for((i=0;i&lt;=100;i++))<br>do<br>        s=$[$s+$i]<br>done<br><span class="hljs-meta">#</span><span class="bash"> 基本语法二：</span><br><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><span class="hljs-meta">#</span><span class="bash">打印数字</span><br><br>for i in $*<br>    do<br>      echo &quot;ban zhang love $i &quot;<br>    done<br></code></pre></td></tr></table></figure></li><li><p>while循环</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">while</span>循环从1叫到100</span><br><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>s=0<br>i=1<br>while [ $i -le 100 ]<br>do<br>        s=$[$s+$i]<br>        i=$[$i+1]<br>done<br><br>echo $s<br></code></pre></td></tr></table></figure></li></ul><h2 id="read读取控制台输入"><a href="#read读取控制台输入" class="headerlink" title="read读取控制台输入"></a>read读取控制台输入</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-built_in">read</span>(选项)(参数)</span><br><span class="hljs-meta">#</span><span class="bash">选项：</span><br><span class="hljs-meta">#</span><span class="bash">-p：指定读取值时的提示符；</span><br><span class="hljs-meta">#</span><span class="bash">-t：指定读取值时等待的时间（秒）。</span><br><span class="hljs-meta">#</span><span class="bash">参数</span><br><span class="hljs-meta">#</span><span class="bash">变量：指定读取值的变量名</span><br><span class="hljs-meta">#</span><br><span class="hljs-meta">#</span><br><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>read -t 7 -p &quot;Enter your name in 7 seconds &quot; NAME<br>echo $NAME<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><p>系统函数</p></li><li><p>basename [string / pathname] [suffix]  （功能描述：basename命令会删掉所有的前缀包括最后一个（‘/’）字符，然后将字符串显示出来。</p></li><li><p>选项：</p><p>suffix为后缀，如果suffix被指定了，basename会将pathname或string中的suffix去掉。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@hadoop101 datas]$ basename /home/atguigu/banzhang.txt <br>banzhang.txt<br>[root@hadoop101 datas]$ basename /home/atguigu/banzhang.txt .txt<br>banzhang<br></code></pre></td></tr></table></figure></li><li><p>dirname 文件绝对路径        （功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分））</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@hadoop101 ~]$ dirname /home/atguigu/banzhang.txt <br>/home/atguigu<br></code></pre></td></tr></table></figure></li><li><p>自定义函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">1．基本语法</span><br><span class="hljs-meta">#</span><span class="bash">[ <span class="hljs-keyword">function</span> ] funname[()]</span><br><span class="hljs-meta">#</span><span class="bash">&#123;</span><br><span class="hljs-meta">#</span><span class="bash">Action;</span><br><span class="hljs-meta">#</span><span class="bash">[<span class="hljs-built_in">return</span> int;]</span><br><span class="hljs-meta">#</span><span class="bash">&#125;</span><br><span class="hljs-meta">#</span><span class="bash">funname</span><br><span class="hljs-meta">#</span><span class="bash">2．经验技巧</span><br><span class="hljs-meta">#</span><span class="bash">（1）必须在调用函数地方之前，先声明函数，shell脚本是逐行运行。不会像其它语言一样先编译。</span><br><span class="hljs-meta">#</span><span class="bash">（2）函数返回值，只能通过$?系统变量获得，可以显示加：<span class="hljs-built_in">return</span>返回，如果不加，将以最后一条<span class="hljs-comment">#命令运行结果，作为返回值。return后跟数值n(0-255)</span></span><br><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>function sum()<br>&#123;<br>    s=0<br>    s=$[ $1 + $2 ]<br>    echo &quot;$s&quot;<br>&#125;<br><br>read -p &quot;Please input the number1: &quot; n1;<br>read -p &quot;Please input the number2: &quot; n2;<br>sum $n1 $n2;<br></code></pre></td></tr></table></figure></li></ul><h2 id="shell工具"><a href="#shell工具" class="headerlink" title="shell工具"></a>shell工具</h2><h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3><ul><li><p>cut:cut的工作就是“剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。</p></li><li><p>cut [选项参数]  filename     说明：默认分隔符是制表符</p></li><li><table><thead><tr><th align="left">选项参数</th><th>功能</th></tr></thead><tbody><tr><td align="left">-f</td><td>列号，提取第几列</td></tr><tr><td align="left">-d</td><td>分隔符，按照指定分隔符分割列</td></tr><tr><td align="left">-c</td><td>指定具体字符</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@hadoop101 datas]$ touch cut.txt<br>[root@hadoop101 datas]$ vim cut.txt<br>dong shen<br>guan zhen<br>wo  wo<br>lai  lai<br>le  le<br><br>[root@hadoop101 datas]$ cut -d &quot; &quot; -f 2,3 cut.txt <br>shen<br>zhen<br> wo<br> lai<br> le<br> <br> [root@hadoop101 datas]$ cut -d &quot; &quot; -f 1 cut.txt <br>dong<br>guan<br>wo<br>lai<br>le<br><br>[root@hadoop101 datas]$ cat cut.txt | grep &quot;guan&quot; | cut -d &quot; &quot; -f 1<br>guan<br></code></pre></td></tr></table></figure></li></ul><h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><ul><li><p>sed是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”，接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。</p></li><li><ol><li>基本用法</li></ol><p>sed [选项参数]  ‘command’  filename</p><ol start="2"><li>选项参数说明</li></ol><table><thead><tr><th>选项参数</th><th>功能</th></tr></thead><tbody><tr><td>-e</td><td>直接在指令列模式上进行sed的动作编辑。</td></tr><tr><td>-i</td><td>直接编辑文件</td></tr></tbody></table><ol start="3"><li>命令功能描述</li></ol><table><thead><tr><th>命令</th><th>功能描述</th></tr></thead><tbody><tr><td><strong>a</strong></td><td>新增，a的后面可以接字串，在下一行出现,a前面可以指定行</td></tr><tr><td>d</td><td>删除</td></tr><tr><td>s</td><td>查找并替换</td></tr></tbody></table></li></ul><ul><li><p>command中可以匹配正则表达式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 将“mei nv”这个单词插入到sed.txt第二行下，打印。</span><br>[root@hadoop102 datas]$ sed &#x27;2a mei nv&#x27; sed.txt <br>dong shen<br>guan zhen<br>mei nv<br>wo  wo<br>lai  lai<br>le  le<br><span class="hljs-meta">#</span><span class="bash"> 文件内容并没有改变</span><br>[root@hadoop102 datas]$ cat sed.txt <br>dong shen<br>guan zhen<br>wo  wo<br>lai  lai<br>le  le<br><span class="hljs-meta">#</span><span class="bash"> 注意：‘g’表示global，全部替换</span><br>[atguigu@hadoop102 datas]$ sed &#x27;s/wo/ni/g&#x27; sed.txt <br>dong shen<br>guan zhen<br>ni  ni<br>lai  lai<br>le  le<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><ul><li><p>一个强大的文本分析工具，把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行分析处理。</p></li><li><ol><li>基本用法</li></ol><p>awk [选项参数] ‘pattern1{action1} pattern2{action2}…’ filename</p><p>pattern：表示AWK在数据中查找的内容，就是匹配模式</p><p>action：在找到匹配内容时所执行的一系列命令</p><ol start="2"><li>选项参数说明</li></ol><table><thead><tr><th>选项参数</th><th>功能</th></tr></thead><tbody><tr><td>-F</td><td>指定输入文件折分隔符</td></tr><tr><td>-v</td><td>赋值一个用户定义变量</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br><span class="hljs-meta">#</span><span class="bash">（1）搜索passwd文件以root关键字开头的所有行，并输出该行的第7列。</span><br>[root@hadoop102 datas]$ awk -F: &#x27;/^root/&#123;print $7&#125;&#x27; passwd <br>/bin/bash<br><span class="hljs-meta">#</span><span class="bash">（2）搜索passwd文件以root关键字开头的所有行，并输出该行的第1列和第7列，中间以“，”号分割。</span><br>[root@hadoop102 datas]$ awk -F: &#x27;/^root/&#123;print $1&quot;,&quot;$7&#125;&#x27; passwd <br>root,/bin/bash<br><span class="hljs-meta">#</span><span class="bash">注意：只有匹配了pattern的行才会执行action</span><br><span class="hljs-meta">#</span><span class="bash">（3）只显示/etc/passwd的第一列和第七列，以逗号分割，且在所有行前面添加列名user，shell在<span class="hljs-comment">#最后一行添加&quot;dahaige，/bin/zuishuai&quot;。</span></span><br>[root@hadoop102 datas]$ awk -F : &#x27;BEGIN&#123;print &quot;user, shell&quot;&#125; &#123;print $1&quot;,&quot;$7&#125; END&#123;print &quot;dahaige,/bin/zuishuai&quot;&#125;&#x27; passwd<br>user, shell<br>root,/bin/bash<br>bin,/sbin/nologin<br>。。。<br>atguigu,/bin/bash<br>dahaige,/bin/zuishuai<br><span class="hljs-meta">#</span><span class="bash">注意：BEGIN 在所有数据读取行之前执行；END 在所有数据执行之后执行。</span><br><span class="hljs-meta">#</span><span class="bash">（4）将passwd文件中的用户id增加数值1并输出</span><br>[root@hadoop102 datas]$ awk -v i=1 -F: &#x27;&#123;print $3+i&#125;&#x27; passwd<br>1<br>2<br>3<br>4<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>awk的内置变量</p><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>FILENAME</td><td>文件名</td></tr><tr><td>NR</td><td>已读的记录数</td></tr><tr><td>NF</td><td>浏览记录的域的个数（切割后，列的个数）</td></tr></tbody></table></li></ul><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><ul><li><p>sort命令是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出。</p></li><li><p>基本语法</p><p>sort(选项)(参数)</p></li></ul><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-n</td><td>依照数值的大小排序</td></tr><tr><td>-r</td><td>以相反的顺序来排序</td></tr><tr><td>-t</td><td>设置排序时所用的分隔字符</td></tr><tr><td>-k</td><td>指定需要排序的列</td></tr></tbody></table><p>参数：指定待排序的文件列表</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大数据</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux</title>
    <link href="/2021/05/11/Linux/"/>
    <url>/2021/05/11/Linux/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="vim的三种模式"><a href="#vim的三种模式" class="headerlink" title="vim的三种模式"></a>vim的三种模式</h2><h3 id="一般模式"><a href="#一般模式" class="headerlink" title="一般模式"></a>一般模式</h3><ul><li>以vi/vim编辑器打开一个文件就进入了一般默认，是默认的默认</li><li>在一般模式中可以对文件进行复制、粘贴、删除、撤销</li><li>常用的命令<ul><li>yy<ul><li>复制一行</li></ul></li><li>y数字y<ul><li>复制多行</li></ul></li><li>dd<ul><li>删除一行</li></ul></li><li>d数字d<ul><li>删除多行</li></ul></li><li>p<ul><li>粘贴</li></ul></li><li>u<ul><li>撤销</li></ul></li><li>^<ul><li>回到行头</li></ul></li><li>$<ul><li>回到行尾</li></ul></li><li>gg或1+G<ul><li>回到页头</li></ul></li><li>G<ul><li>回到页尾</li></ul></li><li>数字+G<ul><li>回到某一行<h3 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h3></li></ul></li></ul></li><li>在一般模式中输入i、o、a或I、O、A时就进入了编辑模式</li><li>在编辑模式中按Esc又回到一般模式</li><li>常用的命令<ul><li>i<ul><li>在光标前插入</li></ul></li><li>o<ul><li>在下一行插入<h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3></li></ul></li></ul></li><li>在一般模式中输入:、/或？时就进入了命令模式</li><li>在命令模式中按Esc又回到一般模式</li><li>常用的命令<ul><li>:w<ul><li>保存</li></ul></li><li>:q<ul><li>推出</li></ul></li><li>:!<ul><li>强制执行</li></ul></li><li>:wq！<ul><li>保存并强制退出</li></ul></li><li>ZZ<ul><li>如果没有修改直接退出，修改了保存后退出</li></ul></li><li>:%s/old 字符/new 字符<ul><li>批量替换字符</li></ul></li><li>:nohl<ul><li>取消高亮显示</li></ul></li><li>/要查找的词或?要查找的词<ul><li>通过n或N进行向上或向下的查找</li></ul></li><li>:set nu<ul><li>设置显示行号</li></ul></li><li>:set nonu<ul><li>取消显示行号</li></ul></li></ul></li></ul><h2 id="网络相关命令"><a href="#网络相关命令" class="headerlink" title="网络相关命令"></a>网络相关命令</h2><ul><li>ifconfig<ul><li>查询ip地址</li></ul></li><li>hostname<ul><li>查看主机名</li><li>修改主机名<ul><li>vim /etc/sysconfig/network</li></ul></li><li>配置ip地址与主机名的映射关系<ul><li>vim /etc/hosts</li></ul></li></ul></li><li>service 管理后台服务<ul><li>service 服务名 start<ul><li>开启某个服务</li></ul></li><li>service 服务名 stop<ul><li>关闭某个服务</li></ul></li><li>service 服务名 status<ul><li>查看服务的状态</li></ul></li></ul></li><li>chkconfig 查看开机启动状态<ul><li>chkconfig 服务名 on<ul><li>开启某个服务开机自启</li></ul></li><li>chkconfig 服务名 off<ul><li>关闭某个服务开机自启</li></ul></li><li>chkconfig 服务名 –list<ul><li>查看某个服务的开机自启状态</li><li>一共有7个运行级别（0到6）<ul><li>如果2、3、4、5这四个运行级别是开启的则当前服务就是开机自启的</li></ul></li></ul></li></ul></li></ul><h2 id="帮助相关命令"><a href="#帮助相关命令" class="headerlink" title="帮助相关命令"></a>帮助相关命令</h2><ul><li>man和help<ul><li>查询命令的帮助信息</li></ul></li><li>常用的快捷键<ul><li>ctrl + l<ul><li>清屏</li></ul></li><li>ctrl + c<ul><li>停止进程</li></ul></li><li>一定要善用Tab键<ul><li>可以帮助我们自动补全路径，防止出错</li></ul></li><li>通过上下键查询最近输入过的命令</li><li>ctrl + alt<ul><li>鼠标在虚拟机之间和主机之间切换</li></ul></li></ul></li></ul><h2 id="文件相关命令"><a href="#文件相关命令" class="headerlink" title="文件相关命令"></a>文件相关命令</h2><ul><li>pwd<ul><li>查看当前所在的工作目录</li></ul></li><li>cd<ul><li>进入某个目录<ul><li>通过绝对路径和相对路径都可以进入某个目录</li></ul></li><li>cd -<ul><li>返回上一次所在的目录</li></ul></li><li>cd或cd ~<ul><li>回到自己的家目录</li></ul></li></ul></li><li>rm -rf <ul><li>强制删除文件或目录，不提示</li></ul></li><li>touch 文件名<ul><li>创建一个空文件</li></ul></li><li>mkdir<ul><li>创建目录</li></ul></li><li>echo “要输出的内容”<ul><li>输出内容到控制台</li></ul></li><li>cat 文件<ul><li>查看小文件</li></ul></li><li>less 文件<ul><li>查看大文件<ul><li>通过pageup和pagedown键翻页</li></ul></li></ul></li><li>cp 源文件 目录<ul><li>将某个文件复制到某个目录下</li></ul></li><li>mv<ul><li>mv 老名字 新名字<ul><li>给文件重命名</li></ul></li><li>mv 源文件 目录<ul><li>剪切文件到某个目录下</li></ul></li></ul></li></ul><h2 id="搜索查找类命令"><a href="#搜索查找类命令" class="headerlink" title="搜索查找类命令"></a>搜索查找类命令</h2><ul><li>find 某个目录 [选项] 内容<ul><li>在某个目录下查找相关内容</li><li>选项<ul><li>-name <ul><li>根据文件名称查找</li></ul></li><li>-user<ul><li>根据文件所属的用户查找</li></ul></li><li>-size<ul><li>根据文件的大小查找</li></ul></li></ul></li></ul></li><li>grep<ul><li>通常结合管道符 | 进行过滤查找</li><li>ll /root | grep -n atguigu.txt<ul><li>查找/root目录下是否包含atguigu.txt文件，并且会显示出行号</li></ul></li></ul></li><li>which<ul><li>查询某个命令在那个目录下</li></ul></li></ul><h2 id="压缩解压缩类命令"><a href="#压缩解压缩类命令" class="headerlink" title="压缩解压缩类命令"></a>压缩解压缩类命令</h2><ul><li>tar -zcvf  xxx.tar.gz 要压缩的内容<ul><li>压缩文件</li></ul></li><li>tar -zxvf xxx.tar.gz<ul><li>解压缩tar包</li></ul></li></ul><h2 id="进程线程类命令"><a href="#进程线程类命令" class="headerlink" title="进程线程类命令"></a>进程线程类命令</h2><ul><li>ps -aux | grep xxx<ul><li>查看内存和CPU的占用率</li></ul></li><li>ps -ef | grep xxx<ul><li>查看进程和父进程的ID</li></ul></li><li>kill -9 进程ID<ul><li>通过进程ID杀死进程</li></ul></li><li>killall 进程名<ul><li>通过进程名杀死进程</li></ul></li><li>netstat -nlp | grep 端口号<ul><li>查看端口号是否被占用</li></ul></li></ul><h2 id="RPM软件包和YUM仓库"><a href="#RPM软件包和YUM仓库" class="headerlink" title="RPM软件包和YUM仓库"></a>RPM软件包和YUM仓库</h2><ul><li>rpm -qa<ul><li>查询安装的所有的rpm软件包</li></ul></li><li>rpm -qa | grep 软件名<ul><li>查询安装的某个软件的rpm软件包名</li></ul></li><li>rpm -e –nodeps rpm软件包名<ul><li>不检查依赖协助某个rpm软件包</li></ul></li><li>rpm -ivh rpm软件包名<ul><li>安装rpm软件包</li></ul></li><li>yum -y install<ul><li>安装rpm软件包</li></ul></li><li>yum -y update<ul><li>更新rpm软件包</li></ul></li><li>yum -y check-update<ul><li>检查某个rpm软件包是否有更新</li></ul></li><li>yum -y remove<ul><li>卸载rpm软件包</li></ul></li><li>yum list<ul><li>查询所有缓存的rpm软件包</li></ul></li><li>yum clean all<ul><li>清除缓存</li></ul></li><li>yum makecache<ul><li>建立缓存</li></ul></li><li>yum deplist<ul><li>显示yum软件包的所有依赖关系</li></ul></li></ul><h2 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h2><ul><li>文件属性<ul><li>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。在Linux中我们可以使用ll或者ls -l命令来显示一个文件的属性以及文件所属的用户和组。</li><li><a href="https://imgtu.com/i/ga5mY6"><img src="https://z3.ax1x.com/2021/05/11/ga5mY6.md.png" alt="ga5mY6.md.png"></a></li><li>首位表示类型<ul><li>符号 - 代表文件</li><li>符号 d 代表目录</li><li>符号 l 代表链接文档</li></ul></li><li>第1-3位确定属主（该文件的所有者）拥有该文件的权限。—User </li><li>第4-6位确定属组（所有者的同组用户）拥有该文件的权限，—Group </li><li>第7-9位确定其他用户拥有该文件的权限 —Other </li></ul></li><li>chmod修改权限<ul><li>方式一：<ul><li>chmod  [{ugoa}{+-=}{rwx}] 文件或目录 </li><li>chmod g+x houge.txt</li><li>chmod u-x,o+x houge.txt</li></ul></li><li>方式二：<ul><li>chmod  [mode=421 ]  [文件或目录]</li><li>u:所有者  g:所有组  o:其他人  a:所有人(u、g、o的总和)</li><li>r=4 w=2 x=1        rwx=4+2+1=7 </li><li>chmod 777 houge.txt</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL</title>
    <link href="/2021/04/25/mysql/"/>
    <url>/2021/04/25/mysql/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><blockquote><ul><li>C/S 架构</li><li>服务器程序是 mysqld.exe</li><li>客户端程序是 mysql.exe</li><li>cmd的打开方式：</li></ul></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mysql -uroot -p123456 -h127.0.0.1 -P3306<br>长选项：<br>mysql <span class="hljs-attribute">--host</span>=主机地址 <span class="hljs-attribute">--port</span>=端口 <span class="hljs-attribute">--user</span>=用户名 <span class="hljs-attribute">--password</span>=密码 默认数据库<br></code></pre></td></tr></table></figure><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><blockquote><ul><li>查看服务器中的所有数据库</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">databases</span>;<br></code></pre></td></tr></table></figure><blockquote><ul><li>创建新的数据库</li><li>数据库以目录的形式保存在服务器<br>安装目录/data目录下</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">databases</span>;<br></code></pre></td></tr></table></figure><blockquote><ul><li>切换当前工作数据库<br>mysql&gt; use company;</li></ul></blockquote><blockquote><ul><li>查看当前数据库中的所有表<br>show tables;</li><li>跨库查看表<br>show tables from 其他库</li></ul></blockquote><blockquote><ul><li>把.sql文件中数据导入数据库<br>source e:sql/company.sql;</li></ul></blockquote><blockquote><ul><li>查看表中的所有数据<br>select * from employees;</li></ul></blockquote><blockquote><ul><li>创建world数据库, 并导入 world.sql , 查看表中的数据</li><li>create database world;</li></ul></blockquote><blockquote><ul><li>use world;</li></ul></blockquote><blockquote><ul><li>source d:/mywork/mysql/world.sql;</li><li>查看当前数据库<br>select database();</li><li>创建表</li></ul></blockquote><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crystal">create table customer(<br>id int,<br>name varchar(<span class="hljs-number">20</span>),<br>age int,<br>email varchar(<span class="hljs-number">50</span>),<br>gender <span class="hljs-class"><span class="hljs-keyword">enum</span>(&#x27;男&#x27;, &#x27;女&#x27;)</span><br>);<br></code></pre></td></tr></table></figure><blockquote><ul><li>丢弃表<br>drop table customer;</li></ul></blockquote><blockquote><ul><li>查看表结构<br>describe customer;</li></ul></blockquote><blockquote><ul><li>desc 表名</li><li>查看表的建表语句<br>show create table 表名;</li><li>插入数据</li><li>存储引擎 : InnoDB(支持事务, 外键等高级特性), MyISAM(不支持事务, 不支持外键)</li><li>show engines;显示支持的引擎</li><li>``号专门用于包围数据库对象的名称(数据库, 表, 列, 主键, 外键, 索引, 函数, 存储过程, 触发器)<br>查询表中的所有数据</li><li>select * from 表名; from关键字可以省略</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">插入数据<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> customer(<br><span class="hljs-keyword">id</span>,<br><span class="hljs-keyword">name</span>,<br>age,<br>email,<br>gender <br>) <span class="hljs-keyword">values</span> (<br><span class="hljs-number">1</span>,<br><span class="hljs-string">&#x27;张三&#x27;</span>,<br><span class="hljs-number">30</span>,<br><span class="hljs-string">&#x27;zhang3@qq.com&#x27;</span>,<br><span class="hljs-string">&#x27;男&#x27;</span><br>);<br></code></pre></td></tr></table></figure><blockquote><ul><li>修改数据, 如果没有where 语句会导致修改所有记录</li></ul></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">update<span class="hljs-built_in"> customer </span><span class="hljs-builtin-name">set</span> <br>age = 3,<br>email = <span class="hljs-string">&#x27;QQQ&#x27;</span><br>where <br>id = 1;<br></code></pre></td></tr></table></figure><blockquote><ul><li>删除数据, 如果没有where语句会导致删除所有记录</li></ul></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">delete <span class="hljs-keyword">from</span> customer<br>where id = 3;<br></code></pre></td></tr></table></figure><blockquote><ul><li>针对数据的操作.</li></ul></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">C insert into  <span class="hljs-regexp">//</span>Create <br>R select <span class="hljs-regexp">//</span>Retrieve<br>U update <span class="hljs-regexp">//</span>Update<br>D <span class="hljs-keyword">delete</span> <span class="hljs-regexp">//</span>Delete<br></code></pre></td></tr></table></figure><blockquote><ul><li>查看表结构 :<br>desc 表名;</li></ul></blockquote><blockquote><ul><li>SQL注意 :<blockquote><ul><li>SQL 语言大小写不敏感。 </li><li>SQL 可以写在一行或者多行</li><li>关键字不能被缩写也不能分行</li><li>各子句一般要分行写。</li><li>使用缩进提高语句的可读性。</li></ul></blockquote></li><li>给列起别名, 可以省略as关键字, 别名中如果有特殊符号, 可以使用””包围.</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>population <span class="hljs-keyword">as</span> pop,<br><span class="hljs-keyword">name</span> <span class="hljs-string">&quot;国家 名称&quot;</span>,<br>code<br><span class="hljs-keyword">from</span> <br>country;<br></code></pre></td></tr></table></figure><blockquote><ul><li>where 条件布尔(一个表达式，返回结果永远是一个布尔值)</li></ul></blockquote><blockquote><ul><li>执行顺序SQL：先from, 再where 最后select </li></ul></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">SELECT</span> <span class="hljs-string"></span><br><span class="hljs-attr">employee_id</span> <span class="hljs-string">empId, </span><br><span class="hljs-attr">last_name</span> <span class="hljs-string">name, </span><br><span class="hljs-attr">job_id</span> <span class="hljs-string">job, </span><br><span class="hljs-attr">department_id</span> <span class="hljs-string">deptId</span><br><span class="hljs-attr">FROM</span>   <span class="hljs-string"></span><br><span class="hljs-attr">employees</span><br><span class="hljs-attr">WHERE</span>  <span class="hljs-string"></span><br><span class="hljs-attr">department_id</span> = <span class="hljs-string">90 ;</span><br><br><span class="hljs-meta">--</span> <span class="hljs-string">错误!! where中不可以使用列的别名, 因为此时虚表的列还没有生成好.</span><br></code></pre></td></tr></table></figure><blockquote><ul><li>Between a and b 都包含</li><li>like <blockquote><ul><li>% 表示任意个任意字符</li><li>_ 表示一个任意字符</li></ul></blockquote></li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">查询姓名中第2个字母是o其他无所谓<br><span class="hljs-keyword">SELECT</span> last_name<br><span class="hljs-keyword">FROM</span>   employees<br><span class="hljs-keyword">WHERE</span>  last_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;_o%&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><ul><li>只要有null参与比较运算, 结果一定是false</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql">查询哪些国家没有首都<br>只要有null参与比较运算, 结果一定是false<br><span class="hljs-comment">--错误!!</span><br><span class="hljs-keyword">select</span> <br><span class="hljs-keyword">name</span>,<br>continent,<br>capital<br><span class="hljs-keyword">from</span> <br>country <br><span class="hljs-keyword">where</span> <br>capital = <span class="hljs-literal">null</span>;<br><br>查询哪些国家没有首都<br><span class="hljs-keyword">select</span> <br><span class="hljs-keyword">name</span>,<br>continent,<br>capital<br><span class="hljs-keyword">from</span> <br>country <br><span class="hljs-keyword">where</span> <br>capital <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span>;<br><br>查询哪些国家有首都<br><span class="hljs-keyword">select</span> <br><span class="hljs-keyword">name</span>,<br>continent,<br>capital<br><span class="hljs-keyword">from</span> <br>country <br><span class="hljs-keyword">where</span> <br>capital <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><blockquote><ul><li>where 也支持算术运算, 结果为0表示假非0表示真</li><li>distinct 去重, 要求列真的有重复的</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br><span class="hljs-keyword">distinct</span><br>continent,<br><span class="hljs-keyword">name</span><br><span class="hljs-keyword">from</span><br>country;<br></code></pre></td></tr></table></figure><blockquote><ul><li>order by  可以排序, 只是给结果集虚表排序</li><li>默认是升充(asc)    </li><li>降序必须指定(desc)</li><li>order by 可以使用列的别名.</li><li>order by  列1, 列2 先以列1排序, 再在相同的列1数据中, 再依据列2再微排.</li></ul></blockquote><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <br>last_name, <br>department_id, <br>salary<br><span class="hljs-keyword">FROM</span>   <br>employees<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <br>department_id, <br>salary <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><blockquote><ul><li>写SQL的步骤 : <blockquote><ul><li>(1) from 基表</li><li>(2) where 过滤哪些行</li><li>(3) select 选择哪些列</li><li>(4) order by 以哪些列为排序依据. </li></ul></blockquote></li></ul></blockquote><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="表联接"><a href="#表联接" class="headerlink" title="表联接"></a>表联接</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">表联接<br><span class="hljs-keyword">select</span> <br>* <br><span class="hljs-keyword">from</span> <br>city2,<br>country2;<br>笛卡尔集中的数据绝大多数都是垃圾, 必须使用行过滤.<br></code></pre></td></tr></table></figure><blockquote><ul><li>笛卡尔集中的数据绝大多数都是垃圾, 必须使用行过滤.</li><li>解决列名冲突可以使用表名限定</li></ul></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">--表名也可以起别名, 而且是如果多表联接, 最好起别名.</span><br><span class="hljs-keyword">select</span> <br>ci.name cityName,<br>ci.population cityPop,<br>co.name countryName,<br>co.population countryPop,<br>co.continent<br><span class="hljs-keyword">from</span> <br>city2 ci,<br>country2 co <br><span class="hljs-keyword">where</span> <br>ci.countrycode = co.code;<br><br><span class="hljs-comment">--一旦给表起了别名, 原名不可以使用, 必须使用别名. 原因是from最先执行, 它把原始表名变了.</span><br><span class="hljs-keyword">select</span> <br>city2.name cityName,<br>city2.population cityPop,<br>country2.name countryName,<br>country2.population countryPop,<br>country2.continent<br><span class="hljs-keyword">from</span> <br>city2 ci,<br>country2 co <br><span class="hljs-keyword">where</span> <br>city2.countrycode = country2.code;<br></code></pre></td></tr></table></figure><blockquote><ul><li>复习 :<blockquote><ul><li>C/S </li><li>Server : mysqld.exe </li><li>Clinet : mysql.exe </li><li>必须通过客户端才能使用服务器</li><li>需要提供IP, 端口, 用户名, 密码.</li><li>mysql -h127.0.0.1 -P3306 -uroot -p123456</li><li>mysql –host=127.0.0.1 –port=3306 –user=root –password=123456 默认数据库</li><li>mysql –host=主机地址 –port=端口 –user=用户名 –password=密码 默认数据库</li><li>查看所有库<br>show databases;</li><li>切换成当前工作数据库<br>use 数据库;</li><li>查看库中的表<br>show tables;</li><li>跨库查看表<br>show tables from 其他库</li></ul></blockquote></li></ul></blockquote><blockquote><blockquote><ul><li>查看表结构<br>desc 表名;</li></ul></blockquote></blockquote><blockquote><blockquote><ul><li>查看表的建表语句<br>show create table 表名;</li></ul></blockquote></blockquote><blockquote><blockquote><ul><li>存储引擎 : InnoDB(支持事务, 外键等高级特性), MyISAM(不支持事务, 不支持外键)</li></ul></blockquote></blockquote><blockquote><blockquote><ul><li>``专门用于包围数据库对象的名称(数据库, 表, 列, 主键, 外键, 索引, 函数, 存储过程, 触发器)</li><li>查询表中的所有数据<br>select * from 表名; from关键字可以省略</li></ul></blockquote></blockquote><blockquote><blockquote><ul><li>相看当前数据库<br>select<br>  database(), – 函数<br>  now(),<br>  version()</li></ul></blockquote></blockquote><p>select<br>    100, – 常量<br>    ‘abc’<br>from<br>    dual;</p><blockquote><blockquote><ul><li>使用用户变量<br>set @var1 = 100, @var2 = ‘abc’;</li></ul></blockquote></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">--SQL99标准, 用内联代替逗号联接.</span><br><span class="hljs-keyword">select</span> <br>ci.name cityName,<br>ci.population cityPop,<br>co.name countryName,<br>co.population countryPop,<br>co.continent<br><span class="hljs-keyword">from</span> <br>city2 ci<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> <br>country2 co <br><span class="hljs-keyword">on</span><br>ci.countrycode = co.code <span class="hljs-comment">-- 联接条件</span><br><span class="hljs-keyword">where</span>  <br>ci.population &gt; <span class="hljs-number">5000000</span> <span class="hljs-comment">-- 普通过滤</span><br><br><br><span class="hljs-comment">-- where 和 on在内联时可以混用, 但是千万不要.</span><br><span class="hljs-keyword">select</span> <br>ci.name cityName,<br>ci.population cityPop,<br>co.name countryName,<br>co.population countryPop,<br>co.continent<br><span class="hljs-keyword">from</span> <br>city2 ci<br><span class="hljs-keyword">join</span> <br>country2 co <br><span class="hljs-keyword">on</span><br>ci.countrycode = co.code <span class="hljs-comment">-- 联接条件</span><br><span class="hljs-keyword">where</span>  <br>ci.population &gt; <span class="hljs-number">5000000</span> <span class="hljs-comment">-- 普通过滤</span><br></code></pre></td></tr></table></figure><blockquote><ul><li>注意：<blockquote><ul><li>内联接的逻辑是从笛尔集中取出来的是满足联接条件的记录. 有可能会导致某张表的数据不完整.</li></ul></blockquote></li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>co.name countryName,<br>ci.name capitalName,<br>co.capital<br><span class="hljs-keyword">from</span> <br>country2 co <br><span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> <span class="hljs-comment">-- 左外联接, 保证左表数据完整</span><br>city2 ci <br><span class="hljs-keyword">on</span> <br>co.capital = ci.id ;<br><br><span class="hljs-keyword">select</span> <br>co.name countryName,<br>ci.name capitalName,<br>co.capital<br><span class="hljs-keyword">from</span> <br>country2 co <br><span class="hljs-keyword">right</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> <span class="hljs-comment">-- 左外联接, 保证左表数据完整</span><br>city2 ci <br><span class="hljs-keyword">on</span> <br>co.capital = ci.id ;<br><br><span class="hljs-comment">--外联时可以省略outer关键字</span><br><span class="hljs-keyword">select</span> <br>co.name countryName,<br>ci.name capitalName,<br>co.capital<br><span class="hljs-keyword">from</span> <br>country2 co <br><span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span><br>city2 ci <br><span class="hljs-keyword">on</span> <br>co.capital = ci.id ;<br></code></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h4><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">单行函数 -- 作用于结果集中的每一条记录的.<br><span class="hljs-keyword">select</span> <br>upper(name),<br>now(),<br><span class="hljs-keyword">concat</span>(continent, code2)<br><span class="hljs-keyword">from</span> <br>country;<br><br>查询国家表中的数据, 把国家名称,大洲, 国家代码 连接起来, 中间使用<span class="hljs-string">&#x27;=&gt;&#x27;</span>连接.<br>--<span class="hljs-keyword">concat</span>(<span class="hljs-keyword">concat</span>(<span class="hljs-keyword">concat</span>(<span class="hljs-keyword">concat</span>(name, <span class="hljs-string">&#x27;=&gt;&#x27;</span>), continent), <span class="hljs-string">&#x27;=&gt;&#x27;</span>), code)<br><span class="hljs-keyword">select</span> <br><span class="hljs-keyword">concat</span>(name, <span class="hljs-string">&#x27;=&gt;&#x27;</span>, continent, <span class="hljs-string">&#x27;=&gt;&#x27;</span>, code)<br><span class="hljs-keyword">from</span> <br>country;<br></code></pre></td></tr></table></figure><h4 id="组函数"><a href="#组函数" class="headerlink" title="组函数"></a>组函数</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">组函数 -- 作用于一组数据, 最终针对一组只有一个结果. 也称为统计处理<br><span class="hljs-function"><span class="hljs-title">avg</span><span class="hljs-params">()</span></span> 平均<br><span class="hljs-function"><span class="hljs-title">max</span><span class="hljs-params">()</span></span> 最大<br><span class="hljs-function"><span class="hljs-title">min</span><span class="hljs-params">()</span></span> 最小<br><span class="hljs-function"><span class="hljs-title">count</span><span class="hljs-params">()</span></span> 计数<br><span class="hljs-function"><span class="hljs-title">sum</span><span class="hljs-params">()</span></span>求和<br></code></pre></td></tr></table></figure><blockquote><ul><li>获取表中的记录数, 使用count(*)最好.</li><li>如果有group by , 必须让分组依据的列放在select中.</li></ul></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">select <br>-- name, 代表个体信息的列<br>continent,<br>max(population)<br><span class="hljs-keyword">from</span> <br>country <br>group by <br>continent;<br></code></pre></td></tr></table></figure><blockquote><ul><li>对分组的虚表进行过滤, 必须使用having</li><li>having的执行晚于select, 所以可以使用列的别名</li></ul></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros">select <br>GovernmentForm,<br>count(*) ct<br><span class="hljs-keyword">from</span> <br>country<br>group by <br>GovernmentForm<br>having<br>ct &gt; 10<br>order by <br>ct;<br></code></pre></td></tr></table></figure><p>sql语句一般的执行顺序：</p><ol><li>from         确定基表</li><li>join         如果一张基表不够, 再联接其他表</li><li>on             如果有联接表 必须要有on</li><li>where         过滤总基表中的行</li><li>group by     分组, 分组依据的列.</li><li>select         把分组依据的列放在select后, 再考虑要选择哪些列, 及进行哪些函数调用….</li><li>having         进一步把分组后的虚表行过滤</li><li>order by     最终表的一个排序显示.</li></ol><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><blockquote><ul><li>子查询 : 通常需要多步执行的简单查询</li></ul></blockquote><blockquote><ul><li>针对表中的数据进行的操作, 这样的语言称DML(数据操纵语句)<blockquote><ul><li>select R</li><li>update U </li><li>delete D </li><li>insert C</li></ul></blockquote></li></ul></blockquote><blockquote><ul><li>针对数据库中的对象的操作, 这样的语言称DDL(数据定义语言)</li><li>数据库 </li><li>表</li><li>列 </li><li>约束 </li><li>索引 </li><li>预编译</li><li>函数</li><li>存储过程 </li><li>触发器</li><li>事件…..</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs sql">创建数据库 <br><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> 数据库名 <span class="hljs-keyword">charset</span> 字符集;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> school <span class="hljs-keyword">charset</span> utf8;<br><br>修改数据库 <br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> school <span class="hljs-keyword">charset</span> gbk;<br><br>丢弃数据库. 数据库中的所有内容全部丢弃. 慎重!!!!<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> school;<br><br>常用数据类型<br>int 4字节整数<br>bigint8字节整数<br>char(长度)定长字符串<br>varchar(字符数) // 最多65535字节<br>double8字节双精度浮点<br>decimal定点数<br>date 日期<br>datetime日期时间<br>longtext 长文本<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> teacher(<br><span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span> auto_increment,<br><span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>),<br>age <span class="hljs-built_in">int</span>,<br>phone <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>),<br>address <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>),<br>gender enum(<span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;男&#x27;</span>,<br>primary <span class="hljs-keyword">key</span>(<span class="hljs-keyword">id</span>)<br>) <span class="hljs-keyword">engine</span> <span class="hljs-keyword">innodb</span> <span class="hljs-keyword">charset</span> gbk;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> classes(<br><span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span> auto_increment,<br><span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">30</span>),<br>student_count <span class="hljs-built_in">int</span>,<br>room <span class="hljs-built_in">char</span>(<span class="hljs-number">3</span>),<br><span class="hljs-keyword">master</span> <span class="hljs-built_in">int</span>, <span class="hljs-comment">-- 班主任</span><br>begindate <span class="hljs-built_in">date</span>,<br>primary <span class="hljs-keyword">key</span>(<span class="hljs-keyword">id</span>)<br>);<br></code></pre></td></tr></table></figure><blockquote><ul><li>子查询题目例子</li></ul></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">5</span> 查询所有国家的首都和使用率最高的官方语言(选做)<br><span class="hljs-keyword">select</span> <br>co.name,<br>ci.name,<br>cl3.<span class="hljs-keyword">language</span>,<br>cl3.percentage<br><span class="hljs-keyword">from</span> <br>country co <br><span class="hljs-keyword">left join</span> <br>city ci <br><span class="hljs-keyword">on</span> <br>co.capital = ci.id <br><span class="hljs-keyword">left join</span> <br>(<span class="hljs-keyword">select</span> <br>cl.countrycode,<br>cl.<span class="hljs-keyword">language</span>,<br>cl.percentage,<br>cl.isofficial<br><span class="hljs-keyword">from</span> <br>countrylanguage cl <br><span class="hljs-keyword">join</span>  <br>(<span class="hljs-keyword">select</span> countrycode, max(Percentage) maxPer <span class="hljs-keyword">from</span> countrylanguage <span class="hljs-keyword">where</span> isofficial = <span class="hljs-string">&#x27;T&#x27;</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> countrycode) cl2<br><span class="hljs-keyword">on</span> <br>cl.countrycode = cl2.countrycode <br><span class="hljs-keyword">and</span> <br>cl.percentage = cl2.maxPer<br><span class="hljs-keyword">where</span> <br>cl.isofficial = <span class="hljs-string">&#x27;T&#x27;</span><br>) cl3<br><span class="hljs-keyword">on</span> <br>co.code = cl3.countrycode <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <br>cl3.percentage;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql">创建数据库 <br><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> 数据库名 <span class="hljs-keyword">charset</span> utf8;<br><br>修改数据库 只能修改字符集<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> 数据库名 <span class="hljs-keyword">charset</span> 新字符集;<br><br>丢弃数据库<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> 数据加名;<br><br>查看库或表<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span>(<span class="hljs-keyword">table</span>) 数据库名或表名<br><br><span class="hljs-keyword">SQL</span>语言分类<br><span class="hljs-number">1</span>) DML 数据操纵语言, 主要处理数据<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">update</span> <span class="hljs-keyword">delete</span> <br><br><span class="hljs-number">2</span>) <span class="hljs-keyword">DDL</span> 数据定义语言, 主要处理数据库对象<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">show</span> <span class="hljs-keyword">alter</span> <span class="hljs-keyword">drop</span> <br><br><span class="hljs-number">3</span>) DCL 数据控制语句, 主要用于控制事务<br><span class="hljs-keyword">commit</span> <span class="hljs-keyword">rollback</span><br><br></code></pre></td></tr></table></figure><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><blockquote><ul><li>全新方式创建表</li></ul></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1) 全新方式建表<br>create table <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> exists 表名(<br>列1 数据类型1(长度) 其他选项,<br>列2 数据类型2(长度) 其他选项,<br><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>,<br>primary key(列) -- 表级主键<br>) engine 数据库引擎 charset 字符集;<br><br>数据库引擎 : <br>InnoDB : 缺省引擎, 支持事务, 外键等高级特性, 速度慢<br>MyIsam : 速度快, 早期的缺省引擎, 不支持事务,外键等高级特性<br><br>其他选项 : auto_increment,<span class="hljs-built_in"> default </span>缺省值, <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>, unique.<br></code></pre></td></tr></table></figure><blockquote><ul><li>基于子查询, 可以复制数据，不能复制各种约束（key）…</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> 表名 <br>子查询 <br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> country3 <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> world.country <span class="hljs-keyword">where</span> continent = <span class="hljs-string">&#x27;asia&#x27;</span>;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> country4 <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> world.country;<br></code></pre></td></tr></table></figure><blockquote><ul><li>完全复制表结构，不能复制数据</li></ul></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> 表名 <span class="hljs-keyword">like</span> 已有表名<br></code></pre></td></tr></table></figure><h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sql">表结构的修改<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <br><span class="hljs-comment">--子句</span><br><br>添加新列<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <br><span class="hljs-keyword">add</span> 新列名 数据类型 其他选项;<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> teacher <br><span class="hljs-keyword">add</span> gender enum(<span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;男&#x27;</span>;<br><br>修改列<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <br><span class="hljs-keyword">modify</span> 列名 新数据类型 新其他选项;<br><br>修改列名<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <br><span class="hljs-keyword">change</span> 老列名 新列名 新数据类型 新其他选项;<br>丢弃一个列, 此列对应的所有数据都会删除<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">column</span> 列名 <br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> teacher<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">column</span> address;<br>丢弃表 <br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> 表名<span class="hljs-number">1</span>, 表名<span class="hljs-number">2</span>, ....;<br><br>清空表数据<br><span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> 表名; <span class="hljs-comment">-- 它是一个DDL语句, 一旦清除,就不能回滚, 效率高.</span><br><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名; <span class="hljs-comment">-- 它是一个DML语句, 意味着是可以回滚的. 效率低.</span><br><br>修改表名<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名<br><span class="hljs-keyword">rename</span> <span class="hljs-keyword">to</span> 新表名<br></code></pre></td></tr></table></figure><h3 id="插入数据的方式"><a href="#插入数据的方式" class="headerlink" title="插入数据的方式"></a>插入数据的方式</h3><ol><li>全新方式插入<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">insert <span class="hljs-built_in">int</span>o 表名 (<br>列<span class="hljs-number">1</span>,<br>列<span class="hljs-number">2</span>,<br>列<span class="hljs-number">3</span>,<br>.....<br>) values (<br>值<span class="hljs-number">1</span>,<br>值<span class="hljs-number">2</span>,<br>值<span class="hljs-number">3</span>,<br>....<br>)<br></code></pre></td></tr></table></figure></li><li>使用子查询插入<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> students(<br><span class="hljs-keyword">name</span>,<br>age,<br>mobile,<br>gender,<br>address<br>) <span class="hljs-keyword">select</span> <br><span class="hljs-keyword">name</span>,<br>age, <br>mobile,<br>gender,<br><span class="hljs-string">&#x27;北京&#x27;</span><br><span class="hljs-keyword">from</span> <br>teachers <br><span class="hljs-keyword">where</span> <br><span class="hljs-keyword">id</span> <span class="hljs-keyword">in</span> (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><span class="hljs-comment">-- 克隆表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 新表 <span class="hljs-keyword">like</span> 旧表;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 新表 <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> 旧表 <br>克隆城市表到当前库下新成中国城市表 (chinaCity)<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> chinaCity <span class="hljs-keyword">like</span> world.city; <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> chinacity <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> world.city <span class="hljs-keyword">where</span> countrycode = <span class="hljs-string">&#x27;chn&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li> 插入一条数据 insert into 表名 set 数据<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <br>teachers <br><span class="hljs-keyword">set</span> <br><span class="hljs-keyword">name</span> = <span class="hljs-string">&#x27;丁老师&#x27;</span>,<br>age = <span class="hljs-number">25</span>,<br>mobile = <span class="hljs-string">&#x27;123234234&#x27;</span>;<br>修改数据 <br><span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> <br>列<span class="hljs-number">1</span> = 值<span class="hljs-number">1</span>,<br>列<span class="hljs-number">2</span> = 值<span class="hljs-number">2</span>,<br>列<span class="hljs-number">3</span> = 值<span class="hljs-number">3</span>,<br>....<br><span class="hljs-keyword">where</span> <br>行过滤<br><br><span class="hljs-keyword">update</span> teachers <span class="hljs-keyword">set</span> <br>age = <span class="hljs-number">40</span>,<br>mobile = <span class="hljs-string">&#x27;135342342&#x27;</span><br><span class="hljs-keyword">where</span> <br><span class="hljs-keyword">id</span> = <span class="hljs-number">1</span>;<br><br>删除数据 <br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 <br><span class="hljs-keyword">where</span> 行过滤<br><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> teachers <br><span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span> &gt; <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="数据库事物"><a href="#数据库事物" class="headerlink" title="数据库事物"></a>数据库事物</h3><blockquote><ul><li>定义：让数据从一种状态到另一种状态</li><li>ACID特性</li><li>让一组逻辑操作单元当成一个单个的命令来执行.<blockquote><ul><li>A 原子性 : 不可分割 </li><li>C 一致性 : 数据前后是一致</li><li>I 独立性 : 事务间, (独立性有等级)</li><li>D 持久性 : 事务一旦提交, 数据持久化.</li></ul></blockquote></li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sql">设置提交状态：<span class="hljs-keyword">SET</span> AUTOCOMMIT = <span class="hljs-literal">FALSE</span>;<br>或者显式的执行 <span class="hljs-keyword">start</span> <span class="hljs-keyword">transaction</span><br>            或 <span class="hljs-keyword">begin</span><br><br>以第一个 DML 语句的执行作为开始<br><br>以下面的其中之一作为结束:<br><span class="hljs-keyword">COMMIT</span> 或 <span class="hljs-keyword">ROLLBACK</span> 语句<br><span class="hljs-keyword">DDL</span> 语句（自动提交）<br>用户会话正常结束, 提交<br>系统异常终止      回滚<br><br><span class="hljs-keyword">SET</span> AUTOCOMMIT = <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">set</span> autocommit = <span class="hljs-literal">false</span>;<br><br>用一个客户端在事务中删除表数据, 另一个客户端查询??<br><br>预编译 : 提前把SQL编译成可执行的, 在执行时只需要调用它即可.<br><span class="hljs-keyword">prepare</span> 预编译名 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;SQL&#x27;</span>; <br><br><span class="hljs-keyword">prepare</span> p1 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;select * from teachers&#x27;</span><br><br>执行预编译 <br><span class="hljs-keyword">execute</span> p1; <br><br>丢弃预编译<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">prepare</span> p1;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">prepare</span> p2 <br><span class="hljs-keyword">from</span> <br><span class="hljs-string">&#x27;insert into teachers(</span><br><span class="hljs-string">name, </span><br><span class="hljs-string">age, </span><br><span class="hljs-string">mobile</span><br><span class="hljs-string">) values (</span><br><span class="hljs-string">?,</span><br><span class="hljs-string">?,</span><br><span class="hljs-string">?</span><br><span class="hljs-string">)&#x27;</span>;<br><br><span class="hljs-keyword">prepare</span> p3 <span class="hljs-keyword">from</span> <br><span class="hljs-string">&#x27;delete from teachers </span><br><span class="hljs-string"> where id = ?&#x27;</span>;<br><br>在执行时预编译时, 代替?的实参必须要用用户变量<br><br><span class="hljs-keyword">set</span> @变量名 = 值, @变量名<span class="hljs-number">2</span> = 值<span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">execute</span> 预编译 <span class="hljs-keyword">using</span> @变量名, @变量名<span class="hljs-number">2</span>;<br><br>? 只能代替值的部分, 表名, 列名绝不可以.<br>下面是错误!!<br><span class="hljs-keyword">prepare</span> p4 <span class="hljs-keyword">from</span> <br><span class="hljs-string">&#x27;insert into teachers(</span><br><span class="hljs-string">?, </span><br><span class="hljs-string">?, </span><br><span class="hljs-string">?</span><br><span class="hljs-string">) values (</span><br><span class="hljs-string">?,</span><br><span class="hljs-string">?,</span><br><span class="hljs-string">?</span><br><span class="hljs-string">)&#x27;</span>;<br><br>在SQL中要想使用&#x27;, 必须再加一个&#x27;, 起到转义的作用<br><span class="hljs-keyword">prepare</span> p2 <span class="hljs-keyword">from</span> <br><span class="hljs-string">&#x27;insert into teachers(</span><br><span class="hljs-string">name, </span><br><span class="hljs-string">age, </span><br><span class="hljs-string">mobile,</span><br><span class="hljs-string">gender</span><br><span class="hljs-string">) values (</span><br><span class="hljs-string">?,</span><br><span class="hljs-string">?,</span><br><span class="hljs-string">?,</span><br><span class="hljs-string">?</span><br><span class="hljs-string">)&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><ul><li>有以下六种约束:<blockquote><ul><li>NOT NULL 非空约束，规定某个字段不能为空, 必须列级约束 </li><li>UNIQUE  唯一约束，规定某个字段在整个表中是唯一的</li><li>PRIMARY KEY  主键(非空且唯一)</li><li>FOREIGN KEY  外键</li><li>DEFAULT  默认值, 必须是列级</li><li>check</li></ul></blockquote></li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">test</span>(<br><span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span> auto_increment,<br><span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>),<br>phone <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>, <span class="hljs-comment">-- 必须列级约束</span><br><span class="hljs-keyword">unique</span>(<span class="hljs-keyword">name</span>), <span class="hljs-comment">-- 可以表级约束</span><br>primary <span class="hljs-keyword">key</span>(<span class="hljs-keyword">id</span>)<br>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">test</span>(<br><span class="hljs-keyword">name</span>,<br>phone<br>) <span class="hljs-keyword">values</span> (<br><span class="hljs-string">&#x27;aaa&#x27;</span>,<br><span class="hljs-string">&#x27;234234&#x27;</span><br>);<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">test</span> <br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">key</span> <span class="hljs-keyword">name</span>; <span class="hljs-comment">-- 丢弃唯一键约束</span><br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test2(<br><span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span> auto_increment,<br><span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>),<br>phone <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>, <span class="hljs-comment">-- 必须列级约束</span><br><span class="hljs-keyword">constraint</span> myunique <span class="hljs-keyword">unique</span>(<span class="hljs-keyword">name</span>, phone), <span class="hljs-comment">-- 可以表级约束, 联合键</span><br>primary <span class="hljs-keyword">key</span>(<span class="hljs-keyword">id</span>)<br>);<br><br></code></pre></td></tr></table></figure><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><blockquote><ul><li>外键 : 让一个表中的记录的值要引用到另一张表中的数据…</li><li>一旦有了外键, 子表中插入数据必须要引用到真实的父表中数据</li><li>一旦父表中的记录被子表引用, 当删除父表中的相关记录时, 不允许删除.</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">foreign key(本表的外键列) references 父表(父表主键)<br><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> classes;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> classes(<br><span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span> auto_increment,<br><span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">30</span>),<br>student_count <span class="hljs-built_in">int</span>,<br>room <span class="hljs-built_in">char</span>(<span class="hljs-number">3</span>),<br><span class="hljs-keyword">master</span> <span class="hljs-built_in">int</span>, <br>begindate <span class="hljs-built_in">date</span>,<br>primary <span class="hljs-keyword">key</span>(<span class="hljs-keyword">id</span>),<br><span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span>(<span class="hljs-keyword">master</span>) <span class="hljs-keyword">references</span> teachers(<span class="hljs-keyword">id</span>)<br>);<br></code></pre></td></tr></table></figure><blockquote><ul><li>丢弃外键, 必须要知道外键名.</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> classes <br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span> classes_ibfk_1;<br></code></pre></td></tr></table></figure><blockquote><ul><li>添加外键</li><li>on delete do nothing, 是默认选项, 在删除父表被引用的记录时不允许</li><li>on delete cascade 级联删除, 当删除父表中的相关记录时, 子表中引用此记录的所有记录也会被删除.</li><li>on delete set null 级联置空.当删除父表中的相关记录时, 子表中引用此记录的所有记录会被置为空.</li></ul></blockquote><h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><blockquote><ul><li>limit n, 把结果集截断成n条记录.</li></ul></blockquote></li></ol><blockquote><ul><li>limit m, n 把结果集中的m条略过, 再截断成n条记录</li><li>limit子句必须放在整个查询语句的最后！</li></ul></blockquote><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><blockquote><ul><li>重点：DML数据操纵语言，主要就是查询</li><li>标准SQL<blockquote><ul><li>select </li><li>from </li><li>left join </li><li>on </li><li>where </li><li>group by </li><li>having </li><li>order by</li></ul></blockquote></li><li>注意点<blockquote><ul><li>注意多表连接的内联，外联 </li><li>函数的使用，where中不能使用</li><li>别名的使用，从group by开始可以使用select中的别名了</li></ul></blockquote></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java8新特性</title>
    <link href="/2021/04/23/java8-new-features/"/>
    <url>/2021/04/23/java8-new-features/</url>
    
    <content type="html"><![CDATA[<h1 id="Java8新特性"><a href="#Java8新特性" class="headerlink" title="Java8新特性"></a>Java8新特性</h1><h2 id="Lambda表达式与函数式接口"><a href="#Lambda表达式与函数式接口" class="headerlink" title="Lambda表达式与函数式接口"></a>Lambda表达式与函数式接口</h2><h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><blockquote><ol><li>Consumer<T> 消费器, 作用是消费一个T类型的对象, 并没有返回.</li></ol><ul><li>void accept(T t) : 有输入无输出</li></ul></blockquote><hr><blockquote><ol start="2"><li>Supplier<T> 供给器, 作用是供给一个T类型的对象, 不需要参数.</li></ol><ul><li>T get() : 无输入有输出</li></ul></blockquote><hr><blockquote><ol start="3"><li>Function&lt;T, R&gt; 转换器, 作用是输入一个T类型对象, 经过处理, 返回的是R类型对象.</li></ol><ul><li>R apply(T t) : 有输入有输出</li></ul></blockquote><hr><blockquote><ol start="4"><li>Predicate<T> 判定器, 作用是输入一个T类型对象, 经过某种判断, 返回true或false</li></ol><ul><li>boolean test(T t) : 有输入有固定输出布尔</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> java8;<br><br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><span class="hljs-keyword">import</span> java.util.function.Predicate;<br><span class="hljs-keyword">import</span> java.util.function.Supplier;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> javabean.Student;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 函数式接口</span><br><span class="hljs-comment"> * 只有一个抽象方法的接口, 可以用<span class="hljs-doctag">@FunctionalInterface</span>修饰</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Consumer&lt;T&gt; 消费器, 作用是消费一个T类型的对象, 并没有返回.</span><br><span class="hljs-comment"> * void accept(T t) : 有输入无输出</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Supplier&lt;T&gt; 供给器, 作用是供给一个T类型的对象, 不需要参数.</span><br><span class="hljs-comment"> * T get() : 无输入有输出</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Function&lt;T, R&gt; 转换器, 作用是输入一个T类型对象, 经过处理, 返回的是R类型对象.</span><br><span class="hljs-comment"> * R apply(T t) : 有输入有输出</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Predicate&lt;T&gt; 判定器, 作用是输入一个T类型对象, 经过某种判断, 返回true或false</span><br><span class="hljs-comment"> * boolean test(T t) : 有输入有固定输出布尔</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 方法引用 : 接口中的抽象方法的模式(输入和输出) 和 Lambda体中的方法调用是一致时, 就可以简化写法.</span><br><span class="hljs-comment"> * 类或对象 :: 方法名</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FunctionTest</span> </span>&#123;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exer22</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//Supplier&lt;Student&gt; supplier2 = () -&gt; new Student();</span><br>Supplier&lt;Student&gt; supplier2 = Student::<span class="hljs-keyword">new</span>;<br>System.out.println(supplier2.get());<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test42</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//Function&lt;Integer, String&gt; function2 = t -&gt; String.valueOf(t);</span><br>Function&lt;Integer, String&gt; function2 = String::valueOf;<br>System.out.println(function2.apply(<span class="hljs-number">1112</span>));<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test32</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//Supplier&lt;Double&gt; supplier2 = () -&gt; Math.random();</span><br>Supplier&lt;Double&gt; supplier2 = Math::random;<br>System.out.println(supplier2.get());<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test12</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//Consumer&lt;String&gt; consumer2 = t -&gt; System.out.println(t);</span><br>Consumer&lt;String&gt; consumer2 = System.out::println;<br>consumer2.accept(<span class="hljs-string">&quot;lkjxlkcjccc&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 写一个判定器, 判断一个学生是否及格</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exer4</span><span class="hljs-params">()</span> </span>&#123;<br>Predicate&lt;Integer&gt; predicate1 = <span class="hljs-keyword">new</span> Predicate&lt;Integer&gt;() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">test</span><span class="hljs-params">(Integer t)</span> </span>&#123;<br><span class="hljs-keyword">return</span> t&gt;= <span class="hljs-number">60</span>;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">boolean</span> test = predicate1.test(<span class="hljs-number">100</span>);<br>System.out.println(test);<br><br>Predicate&lt;Integer&gt; predicate2 = t -&gt; t &gt;= <span class="hljs-number">60</span>;<br>System.out.println(predicate2.test(<span class="hljs-number">100</span>));<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span> </span>&#123;<br>Predicate&lt;Integer&gt; predicate1 = <span class="hljs-keyword">new</span> Predicate&lt;Integer&gt;() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">test</span><span class="hljs-params">(Integer t)</span> </span>&#123;<br><span class="hljs-keyword">return</span> t % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">boolean</span> test = predicate1.test(<span class="hljs-number">83</span>);<br>System.out.println(test);<br><br>Predicate&lt;Integer&gt; predicate2 = t -&gt; t % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>;<br>System.out.println(predicate2.test(<span class="hljs-number">20</span>));<br>&#125;<br><br><span class="hljs-comment">// 写一个转换器, 把学生对象转换成字符串, 内容是姓名+分数</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exer3</span><span class="hljs-params">()</span> </span>&#123;<br>Function&lt;Student, String&gt; function1 = <span class="hljs-keyword">new</span> Function&lt;Student, String&gt;() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">apply</span><span class="hljs-params">(Student t)</span> </span>&#123;<br><span class="hljs-keyword">return</span> t.getName() + <span class="hljs-string">&quot;:&quot;</span> + t.getScore();<br>&#125;<br>&#125;;<br>String apply = function1.apply(<span class="hljs-keyword">new</span> Student(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;小刚&quot;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">80</span>));<br>System.out.println(apply);<br><br>Function&lt;Student, String&gt; function2 = t -&gt; t.getName() + <span class="hljs-string">&quot;:&quot;</span> + t.getScore();<br>System.out.println(function2.apply(<span class="hljs-keyword">new</span> Student(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;小花&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">100</span>)));<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span> </span>&#123;<br>Function&lt;Integer, String&gt; function1 = <span class="hljs-keyword">new</span> Function&lt;Integer, String&gt;() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">apply</span><span class="hljs-params">(Integer t)</span> </span>&#123;<br><span class="hljs-keyword">return</span> String.valueOf(t);<br>&#125;<br>&#125;;<br><br>String apply = function1.apply(<span class="hljs-number">9238</span>);<br>System.out.println(apply);<br><br>Function&lt;Integer, String&gt; function2 = t -&gt; String.valueOf(t);<br>System.out.println(function2.apply(<span class="hljs-number">1112</span>));<br>&#125;<br><br><span class="hljs-comment">// 写一个供给器, 每调用一次供给一个学生对象</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exer2</span><span class="hljs-params">()</span> </span>&#123;<br>Supplier&lt;Student&gt; supplier1 = <span class="hljs-keyword">new</span> Supplier&lt;Student&gt;() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Student();<br>&#125;<br>&#125;;<br>Student student = supplier1.get();<br>System.out.println(student);<br><br>Supplier&lt;Student&gt; supplier2 = () -&gt; <span class="hljs-keyword">new</span> Student();<br>System.out.println(supplier2.get());<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br>Supplier&lt;Double&gt; supplier = <span class="hljs-keyword">new</span> Supplier&lt;Double&gt;() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Double <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> Math.random();<br>&#125;<br>&#125;;<br>System.out.println(supplier.get());<br><br>Supplier&lt;Double&gt; supplier2 = () -&gt; Math.random();<br>System.out.println(supplier2.get());<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>Supplier&lt;Integer&gt; supplier1 = <span class="hljs-keyword">new</span> Supplier&lt;Integer&gt;() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>&#125;<br>&#125;;<br>Integer integer = supplier1.get();<br>System.out.println(integer);<br><br>Supplier&lt;Integer&gt; supplier2 = () -&gt; <span class="hljs-number">100</span>;<br>Integer integer2 = supplier2.get();<br>System.out.println(integer2);<br>&#125;<br><br><span class="hljs-comment">// 写一个消费器, 消费一个Student对象.</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exer1</span><span class="hljs-params">()</span> </span>&#123;<br>Consumer&lt;Student&gt; consumer1 = <span class="hljs-keyword">new</span> Consumer&lt;Student&gt;() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(Student t)</span> </span>&#123;<br>System.out.println(t);<br>&#125;<br>&#125;;<br>consumer1.accept(<span class="hljs-keyword">new</span> Student());<br><br>Consumer&lt;Student&gt; consumer2 = t -&gt; System.out.println(t);<br>consumer2.accept(<span class="hljs-keyword">new</span> Student(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;小花&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">50</span>));<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>Consumer&lt;String&gt; consumer1 = <span class="hljs-keyword">new</span> Consumer&lt;String&gt;() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(String t)</span> </span>&#123;<br>System.out.println(t);<br>&#125;<br>&#125;;<br>consumer1.accept(<span class="hljs-string">&quot;alsdkjfalksdjf&quot;</span>);<br><br>Consumer&lt;String&gt; consumer2 = t -&gt; System.out.println(t);<br>consumer2.accept(<span class="hljs-string">&quot;lkjxlkcjccc&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> java8;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> javabean.Student;<br><span class="hljs-keyword">import</span> javabean.StudentTest;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Stream : </span><br><span class="hljs-comment"> * 1) 不保存数据, 只负责处理数据</span><br><span class="hljs-comment"> * 2) 处理数据不会造成原始数据的变化 , 每次处理都会产生新的流</span><br><span class="hljs-comment"> * 3) 所有操作都是延迟执行的, 只有终止操作执行时才执行中间操作</span><br><span class="hljs-comment"> * 4) 每个流只能&quot;消费&quot;一次, 消费过后就作废.</span><br><span class="hljs-comment"> * 5) 单向, 一次性使用, 可以支持高并发...</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 典型的操作 :</span><br><span class="hljs-comment"> * 1) 创建流(获取流) </span><br><span class="hljs-comment"> * 1) 从集合获取流, 集合.stream();</span><br><span class="hljs-comment"> * 2) 从数组获取流, Arrays.stream(Xxx[] arr);</span><br><span class="hljs-comment"> * 3) 基于散数据, Stream.of(T... objs)</span><br><span class="hljs-comment"> * 4) 使用供给器, 无限流</span><br><span class="hljs-comment"> * 2) 中间操作, 多个中间操作就形成流水线, 是延迟执行的, 中间操作可以省略</span><br><span class="hljs-comment"> * ***filter(Predicate p) : 让流中的每个对象都经过判定器, 如果结果为true留下, 如果是false丢弃. 产生新流</span><br><span class="hljs-comment"> * distinct(); 把流中的数据去重并产生新流, 依据对象的hashCode和equals</span><br><span class="hljs-comment"> * limit(long maxSize) 限制流中的最大数据量</span><br><span class="hljs-comment"> * skip(long n) 跳过前n个元素</span><br><span class="hljs-comment"> * ***map(Function f) 让流中的每个对象都转换为新对象, 所以它的结果的流全变了.</span><br><span class="hljs-comment"> * sorted() 把流中的对象排序 , 自然排序</span><br><span class="hljs-comment"> * *sorted(Comparator c) 定制排序</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 3) 终止操作, 一旦中止, 所有的中间操作就开始执行, 终止操作是必须的.</span><br><span class="hljs-comment"> * ***forEach(Consumer c) : 让流中的每个对象都经过消费器消费一下.</span><br><span class="hljs-comment"> * findFirst() 返回流中的第一个对象</span><br><span class="hljs-comment"> * **count() 计数</span><br><span class="hljs-comment"> * **collect(采集器) 可以把结果集采集到一个新的容器中.</span><br><span class="hljs-comment"> * ***reduce(BinaryOperator op) 把流中的对象两两处理最后产生一个结果</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *Optional是一容器, 里面放一个引用, 如果引用为空, 获取时直接抛异常.</span><br><span class="hljs-comment"> *防止空指针.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StreamTest</span> </span>&#123;<br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exer6</span><span class="hljs-params">()</span> </span>&#123;<br>List&lt;Student&gt; collect = StudentTest.getList()<br>.stream()<br>.distinct()<br>.filter(t -&gt; t.getGrade() == <span class="hljs-number">3</span>)<br>.filter(t -&gt; t.getScore() &lt; <span class="hljs-number">60</span>).sorted((o1, o2) -&gt; -(<span class="hljs-keyword">int</span>)(o1.getScore() - o2.getScore()))<br>.collect(Collectors.toList());<br><span class="hljs-keyword">for</span> (Student student : collect) &#123;<br>System.out.println(student);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 找出全校最高分</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exer5</span><span class="hljs-params">()</span> </span>&#123;<br>Optional&lt;Double&gt; reduce = StudentTest.getList().stream().distinct().map(t -&gt; t.getScore()).reduce((d1, d2) -&gt; d1 &gt; d2 ? d1 : d2);<br>Double orElse = reduce.orElse((<span class="hljs-keyword">double</span>) <span class="hljs-number">999</span>);<br>System.out.println(orElse);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exer4</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">long</span> count = StudentTest.getList().stream().distinct().count();<br>System.out.println(count);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exer3</span><span class="hljs-params">()</span> </span>&#123;<br>Optional&lt;Student&gt; findFirst = StudentTest.getList()<br>.stream()<br>.distinct()<br>.filter(t -&gt; t.getGrade() == <span class="hljs-number">4</span>)<br>.filter(t -&gt; t.getScore() &lt; <span class="hljs-number">60</span>).sorted((o1, o2) -&gt; -(<span class="hljs-keyword">int</span>)(o1.getScore() - o2.getScore()))<br>.limit(<span class="hljs-number">2</span>).findFirst();<br><span class="hljs-comment">//Student student = findFirst.get();</span><br>Student student = findFirst.orElse(<span class="hljs-keyword">new</span> Student()); <span class="hljs-comment">// 最大化减少空指针</span><br>System.out.println(student);<br>&#125;<br><br><span class="hljs-comment">// 3年级没有及格的同学倒序, 取出前2个.</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exer2</span><span class="hljs-params">()</span> </span>&#123;<br>StudentTest.getList()<br>.stream()<br>.distinct()<br>.filter(t -&gt; t.getGrade() == <span class="hljs-number">3</span>)<br>.filter(t -&gt; t.getScore() &lt; <span class="hljs-number">60</span>).sorted((o1, o2) -&gt; -(<span class="hljs-keyword">int</span>)(o1.getScore() - o2.getScore()))<br>.limit(<span class="hljs-number">2</span>).forEach(System.out::println);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test9</span><span class="hljs-params">()</span> </span>&#123;<br>StudentTest.getList().stream().distinct().sorted((t1, t2) -&gt; (<span class="hljs-keyword">int</span>)(t1.getScore() - t2.getScore())).forEach(System.out::println);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test8</span><span class="hljs-params">()</span> </span>&#123;<br>StudentTest.getList().stream().distinct().map(t -&gt; t.getScore()).forEach(System.out::println);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test7</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 第6个到第10个</span><br>StudentTest.getList().stream().distinct().skip(<span class="hljs-number">10</span>).limit(<span class="hljs-number">5</span>).forEach(System.out::println);<br>&#125;<br><br><span class="hljs-comment">// 找出5年级姓张的同学</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exer1</span><span class="hljs-params">()</span> </span>&#123;<br>List&lt;Student&gt; list = StudentTest.getList();<br>list.stream().filter(t -&gt; t.getGrade() == <span class="hljs-number">5</span>).filter(t -&gt; t.getName().startsWith(<span class="hljs-string">&quot;张&quot;</span>)).forEach(System.out::println);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test62</span><span class="hljs-params">()</span> </span>&#123;<br>List&lt;Student&gt; list = StudentTest.getList();<br>list.stream().filter(t -&gt; t.getGrade() == <span class="hljs-number">3</span>).filter(t -&gt; t.getScore() &gt;= <span class="hljs-number">60</span>).forEach(System.out::println);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span> </span>&#123;<br>List&lt;Student&gt; list = StudentTest.getList();<br>Stream&lt;Student&gt; stream = list.stream();<br>Stream&lt;Student&gt; stream2 = stream.filter(t -&gt; t.getGrade() == <span class="hljs-number">3</span>);<br>Stream&lt;Student&gt; stream3 = stream2.filter(t -&gt; t.getScore() &gt;= <span class="hljs-number">60</span>);<br>stream3.forEach(System.out::println);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span> </span>&#123;<br>Stream.generate(Math::random).limit(<span class="hljs-number">10</span>).forEach(System.out::println);<span class="hljs-comment">// 无限流</span><br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span> </span>&#123;<br>Stream&lt;Integer&gt; generate = Stream.generate(() -&gt; <span class="hljs-number">200</span>); <span class="hljs-comment">// 无限流</span><br>generate.forEach(System.out::println);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br>Stream&lt;Number&gt; of = Stream.of(<span class="hljs-number">3.22</span>, <span class="hljs-number">9.33</span>, <span class="hljs-number">4.88</span>, <span class="hljs-number">4.2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>);<br>of.forEach(System.out::println);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>String[] arr = &#123;<span class="hljs-string">&quot;kjsf&quot;</span>, <span class="hljs-string">&quot;qqa&quot;</span>, <span class="hljs-string">&quot;cv&quot;</span>, <span class="hljs-string">&quot;XXX&quot;</span>&#125;;<br>Stream&lt;String&gt; stream = Arrays.stream(arr);<br>stream.forEach(System.out::println);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>list.add((<span class="hljs-keyword">int</span>)(Math.random() * <span class="hljs-number">20</span>));<br>&#125;<br>System.out.println(list);<br><br>Stream&lt;Integer&gt; stream = list.stream();<br>stream.forEach(System.out::println);<br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java网络编程基础</title>
    <link href="/2021/04/23/Java-network/"/>
    <url>/2021/04/23/Java-network/</url>
    
    <content type="html"><![CDATA[<h1 id="Java网络编程基础"><a href="#Java网络编程基础" class="headerlink" title="Java网络编程基础"></a>Java网络编程基础</h1><h2 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> network;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStreamWriter;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NetTest</span> </span>&#123;<br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">server3</span><span class="hljs-params">()</span> </span>&#123;<br>ServerSocket server = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>server = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">8888</span>); <span class="hljs-comment">// 绑定端口</span><br><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;服务器在8888端口监听中.....&quot;</span>);<br><span class="hljs-keyword">final</span> Socket socket1 = server.accept();<br>;<br>Runnable runner = <span class="hljs-keyword">new</span> Runnable() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>BufferedWriter bufferedWriter = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>bufferedWriter = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(socket1.getOutputStream()));<br>bufferedWriter.write(<span class="hljs-string">&quot;我是服务器, 现在时间 : &quot;</span> + LocalDateTime.now());<br>bufferedWriter.newLine();<br>bufferedWriter.flush(); <span class="hljs-comment">// 把数据真的刷入网线中</span><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (bufferedWriter != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>bufferedWriter.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (socket1 != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>socket1.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">5000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">new</span> Thread(runner).start();<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><br><span class="hljs-keyword">if</span> (server != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;服务器关闭....&quot;</span>);<br>server.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">client3</span><span class="hljs-params">()</span> </span>&#123;<br>Socket socket2 = <span class="hljs-keyword">null</span>;<br>BufferedReader bufferedReader = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>socket2 = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8888</span>);<br>bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(socket2.getInputStream()));<br>String readLine = bufferedReader.readLine();<br>System.out.println(readLine);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (bufferedReader != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>bufferedReader.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (socket2 != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>socket2.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 从客户端发送文件给服务端，服务端保存到本地。并返回“发送成功”给客户端。并关闭相应的连接。</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">server2</span><span class="hljs-params">()</span> </span>&#123;<br>ServerSocket server = <span class="hljs-keyword">null</span>;<br>Socket socket1 = <span class="hljs-keyword">null</span>;<span class="hljs-comment">// 网络套接字</span><br><br>InputStream nis = <span class="hljs-keyword">null</span>;<br>FileOutputStream fos = <span class="hljs-keyword">null</span>;<br>BufferedWriter netWriter = <span class="hljs-keyword">null</span>;<br><br><span class="hljs-keyword">try</span> &#123;<br>server = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">7777</span>);<span class="hljs-comment">// 指定服务器接口</span><br>socket1 = server.accept();<br>nis = socket1.getInputStream();<br>fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;朴树 - 猎户星座2.mp3&quot;</span>);<br>netWriter = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(socket1.getOutputStream()));<br><br><span class="hljs-keyword">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">8192</span>];<br><span class="hljs-keyword">int</span> realCount = nis.read(buf);<br><span class="hljs-keyword">while</span> (realCount != -<span class="hljs-number">1</span>) &#123;<br>fos.write(buf, <span class="hljs-number">0</span>, realCount);<br>realCount = nis.read(buf);<br>&#125;<br>netWriter.write(<span class="hljs-string">&quot;发送成功&quot;</span>);<br>netWriter.newLine();<br>netWriter.flush();<br><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (netWriter != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>netWriter.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (fos != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>fos.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (nis != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>nis.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (socket1 != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>socket1.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (server != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>server.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">client2</span><span class="hljs-params">()</span> </span>&#123;<br>Socket socket2 = <span class="hljs-keyword">null</span>;<span class="hljs-comment">// 网络套接字</span><br><br>FileInputStream fis = <span class="hljs-keyword">null</span>;<span class="hljs-comment">// 文件输入流</span><br>OutputStream nos = <span class="hljs-keyword">null</span>;<span class="hljs-comment">// 网络输出流</span><br>BufferedReader netReader = <span class="hljs-keyword">null</span>;<span class="hljs-comment">// 网络输入流</span><br><span class="hljs-keyword">try</span> &#123;<br>socket2 = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">7777</span>);<br>fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;src/朴树 - 猎户星座.mp3&quot;</span>);<span class="hljs-comment">// 要传到服务器端的文件，先读入到客户端</span><br>nos = socket2.getOutputStream();<span class="hljs-comment">// 传输到服务器端的文件输出流</span><br>netReader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(socket2.getInputStream()));<span class="hljs-comment">// 读取服务器端返回的数据</span><br><br><span class="hljs-keyword">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">8192</span>];<br><span class="hljs-comment">// 读取数据</span><br><span class="hljs-keyword">int</span> realCount = fis.read(buf);<br><span class="hljs-keyword">while</span> (realCount != -<span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// 1) 处理已经读的数据</span><br>nos.write(buf, <span class="hljs-number">0</span>, realCount);<br><span class="hljs-comment">// 2) 继续读</span><br>realCount = fis.read(buf);<br>&#125;<br>nos.flush();<span class="hljs-comment">// 将在缓存中的数据全部输出去</span><br>socket2.shutdownOutput();<span class="hljs-comment">// 关闭输出流</span><br><br>String readLine = netReader.readLine();<span class="hljs-comment">// 接受服务器端的数据</span><br>System.out.println(readLine);<br><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<span class="hljs-comment">// 关闭相应的资源</span><br><span class="hljs-keyword">if</span> (netReader != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>netReader.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (nos != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>nos.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (fis != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>fis.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (socket2 != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>socket2.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">server</span><span class="hljs-params">()</span> </span>&#123;<br>ServerSocket server = <span class="hljs-keyword">null</span>;<br>Socket socket1 = <span class="hljs-keyword">null</span>;<br>BufferedReader bufferedReader = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>server = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">9999</span>); <span class="hljs-comment">// 绑定9999端口.</span><br>socket1 = server.accept(); <span class="hljs-comment">// 接受客户端的连接请求, 此方法会引起阻塞.</span><br>System.out.println(socket1);<br><span class="hljs-comment">// 服务器端的socket1和客户端的socket2就建立了双向的网络通道</span><br>InputStream inputStream = socket1.getInputStream();<br>InputStreamReader isr = <span class="hljs-keyword">new</span> InputStreamReader(inputStream);<br><br>bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(isr);<br>String readLine = bufferedReader.readLine();<br>System.out.println(readLine);<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (bufferedReader != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>bufferedReader.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (socket1 != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>socket1.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (server != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>server.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">client</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 连接服务器, 必须知道ip和端口.</span><br>Socket socket2 = <span class="hljs-keyword">null</span>;<br>BufferedWriter bufferedWriter = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>socket2 = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">9999</span>);<br>System.out.println(socket2);<br><span class="hljs-comment">// 客户端的socket2和服务器端的socket1就建立了双向的网络通道</span><br>OutputStream outputStream = socket2.getOutputStream();<br>OutputStreamWriter osw = <span class="hljs-keyword">new</span> OutputStreamWriter(outputStream);<br>bufferedWriter = <span class="hljs-keyword">new</span> BufferedWriter(osw);<br>bufferedWriter.write(<span class="hljs-string">&quot;你好, 服务器, 俺是客户端.....&quot;</span>);<br>bufferedWriter.newLine();<span class="hljs-comment">// 必须要有换行</span><br>bufferedWriter.flush();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (bufferedWriter != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>bufferedWriter.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (socket2 != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>socket2.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="杀死本机被占用的端口号"><a href="#杀死本机被占用的端口号" class="headerlink" title="杀死本机被占用的端口号"></a>杀死本机被占用的端口号</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">netstat</span> -ano   查看操作系统所有占用端口的进程<br><span class="hljs-attribute">netstat</span> -ano | findstr <span class="hljs-string">&quot;9999&quot;</span> 获取占用了<span class="hljs-number">9999</span>端口的进程<br><span class="hljs-attribute">taskkill</span> /F /pid <span class="hljs-number">1234</span> 关闭进程号为<span class="hljs-number">1234</span>的进程<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>网络编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反射</title>
    <link href="/2021/04/22/Java-reflect/"/>
    <url>/2021/04/22/Java-reflect/</url>
    
    <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="单元测试类"><a href="#单元测试类" class="headerlink" title="单元测试类"></a>单元测试类</h2><blockquote><ul><li>单元测试方法的要求：类必须是公共的，必需不能有任何构造器</li><li>方法必修是公共非静态无返回值参数</li><li>执行：在方法名中右击，点击run as -junit</li><li>包装类：把基本数据类型包装成对象</li></ul></blockquote><h2 id="反射基础实例代码"><a href="#反射基础实例代码" class="headerlink" title="反射基础实例代码"></a>反射基础实例代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> reflect;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.*;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.lang.annotation.Annotation;<br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map.Entry;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 反射 : java的动态处理技术</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.FIELD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> HelloAnnotation &#123;<br><span class="hljs-function">String <span class="hljs-title">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;缺省名字&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">id</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> 10</span>;<br>&#125;<br><br><span class="hljs-meta">@HelloAnnotation(name=&quot;abc&quot;)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ArrayList</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span>, <span class="hljs-title">Comparable</span>, <span class="hljs-title">Runnable</span> </span>&#123;<br><br><span class="hljs-meta">@HelloAnnotation</span><br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><span class="hljs-keyword">private</span> String gender;<br><br><span class="hljs-comment">//@HelloAnnotation</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Teacher</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br><span class="hljs-comment">//构造方法，Ctrl+Alt+S+O</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Teacher</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Teacher</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.age = age;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Teacher</span><span class="hljs-params">(String name,String gender)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.gender = gender;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Teacher</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age, String gender)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.age = age;<br><span class="hljs-keyword">this</span>.gender = gender;<br>&#125;<br>    <span class="hljs-comment">//set,get方法 快捷键Ctrl+Alt+S+R</span><br><span class="hljs-comment">//@HelloAnnotation</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.age = age;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getGender</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> gender;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGender</span><span class="hljs-params">(String gender)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.gender = gender;<br>&#125;<br>    <span class="hljs-comment">//Ctrl+Alt+S+S</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Teacher [name=&quot;</span> + name + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&quot;, gender=&quot;</span> + gender + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Object o)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lesson</span><span class="hljs-params">(String content, <span class="hljs-keyword">int</span> time)</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;老师在上[&quot;</span> + content + <span class="hljs-string">&quot;]课, 共上了[&quot;</span> + time +<span class="hljs-string">&quot;]小时&quot;</span>);<br><span class="hljs-comment">//return true;</span><br><span class="hljs-comment">//throw new RuntimeException(&quot;一个异常&quot;);</span><br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectTest</span> </span>&#123;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testName</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>Class clazz = Class.forName(<span class="hljs-string">&quot;reflect.Teacher&quot;</span>);<br>Annotation[] annotations = clazz.getAnnotations();<br>System.out.println(annotations.length);<br>System.out.println(annotations[<span class="hljs-number">0</span>]);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test14</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>Class clazz = Class.forName(<span class="hljs-string">&quot;reflect.Teacher&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;父类 : &quot;</span> + clazz.getSuperclass());<br>Constructor[] constructors = clazz.getConstructors();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; constructors.length; i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;构造器 : &quot;</span> + constructors[i]);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;************************************************&quot;</span>);<br>Field[] fields = clazz.getFields(); <span class="hljs-comment">// 所有公共属性</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; fields.length; i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;公共属性：&quot;</span>+fields[i]);<br>&#125;<br><span class="hljs-comment">//反射尽量不要破坏封装性，容易发生严重后果，慎用getDeclared.....()方法</span><br>Field[] declaredFields = clazz.getDeclaredFields(); <span class="hljs-comment">// 所有本类属性</span><br><span class="hljs-keyword">for</span> (Field field : declaredFields) &#123;<br>System.out.println(<span class="hljs-string">&quot;本类属性：&quot;</span>+field);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;************************************************&quot;</span>);<br>Method[] methods = clazz.getMethods();<span class="hljs-comment">//所有公共方法</span><br><span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>System.out.println(<span class="hljs-string">&quot;公共方法&quot;</span>+method);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;************************************************&quot;</span>);<br>Method[] declaredMethods = clazz.getDeclaredMethods();<span class="hljs-comment">//所有本类方法</span><br><span class="hljs-keyword">for</span> (Method method : declaredMethods) &#123;<br>System.out.println(<span class="hljs-string">&quot;本类方法：&quot;</span>+method);<br>&#125;<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test13</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>Class clazz = Class.forName(<span class="hljs-string">&quot;reflect.Teacher&quot;</span>);<br>Method lessonMethod = clazz.getDeclaredMethod(<span class="hljs-string">&quot;lesson&quot;</span>, String.class, <span class="hljs-keyword">int</span>.class);<br>lessonMethod.setAccessible(<span class="hljs-keyword">true</span>);<br><br>Short n = <span class="hljs-number">3</span>;<br>Object retValue = lessonMethod.invoke(<span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;JavaWEB&quot;</span>, n); <span class="hljs-comment">// 静态方法传null, 不需要传入对象</span><br>System.out.println(retValue);<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (SecurityException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test12</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>Class clazz = Class.forName(<span class="hljs-string">&quot;reflect.Teacher&quot;</span>);<br>Constructor constructor = clazz.getConstructor(String.class, <span class="hljs-keyword">int</span>.class, String.class);<br>Object object = constructor.newInstance(<span class="hljs-string">&quot;佟刚&quot;</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&quot;男&quot;</span>);<br><br><span class="hljs-comment">// getMethod只能获取公共的方法, 包括从父类继承的. </span><br><span class="hljs-comment">//Method lessonMethod = clazz.getMethod(&quot;lesson&quot;, String.class, int.class); </span><br><br><span class="hljs-comment">// getDeclaredMethod可以获取本类中所有声明的方法</span><br>Method lessonMethod = clazz.getDeclaredMethod(<span class="hljs-string">&quot;lesson&quot;</span>, String.class, <span class="hljs-keyword">int</span>.class);<br>lessonMethod.setAccessible(<span class="hljs-keyword">true</span>);<br><br>Short n = <span class="hljs-number">3</span>;<br>Object retValue = lessonMethod.invoke(object, <span class="hljs-string">&quot;JavaWEB&quot;</span>, n); <br>System.out.println(retValue);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    private String outOfBoundsMsg(int index) &#123;</span><br><span class="hljs-comment">        return &quot;Index: &quot;+index+&quot;, Size: &quot;+size;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">//拿父类的方法，会有警告，最好不要暴力访问私有方法，属性</span><br><span class="hljs-comment">Method declaredMethod = clazz.getSuperclass().getDeclaredMethod(&quot;outOfBoundsMsg&quot;, int.class);</span><br><span class="hljs-comment">System.out.println(declaredMethod);</span><br><span class="hljs-comment">//危险操作</span><br><span class="hljs-comment">declaredMethod.setAccessible(true);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Object invoke = declaredMethod.invoke(object, 20);</span><br><span class="hljs-comment">System.out.println(invoke);</span><br><span class="hljs-comment">*/</span><br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123; <span class="hljs-comment">// 类未找到</span><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123; <span class="hljs-comment">// 方法没有找到, 方法名错误或参数列表错误</span><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (SecurityException e) &#123; <span class="hljs-comment">// 安全异常</span><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123; <span class="hljs-comment">// 创建对象时出现异常</span><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123; <span class="hljs-comment">// 非法访问异常</span><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException e) &#123; <span class="hljs-comment">// 非法实参异常, 实参和形参不匹配, 类型和顺序和数量</span><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123; <span class="hljs-comment">// 调用的目标方法内部出现异常了.</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test11</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>Class clazz = Class.forName(<span class="hljs-string">&quot;reflect.Teacher&quot;</span>);<br>Constructor constructor = clazz.getConstructor(String.class, <span class="hljs-keyword">int</span>.class, String.class);<br>Object object = constructor.newInstance(<span class="hljs-string">&quot;佟刚&quot;</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&quot;男&quot;</span>);<br><br><span class="hljs-comment">//object.lesson(&quot;JavaWEB&quot;, 3);</span><br><span class="hljs-comment">//先获取方法</span><br><br>Method lessonMethod = clazz.getMethod(<span class="hljs-string">&quot;lesson&quot;</span>, String.class, <span class="hljs-keyword">int</span>.class); <span class="hljs-comment">// 后面是方法参数类型列表</span><br><span class="hljs-keyword">short</span> n = <span class="hljs-number">3</span>;<br>Object retValue = lessonMethod.invoke(object, <span class="hljs-string">&quot;JavaWEB&quot;</span>, n); <span class="hljs-comment">// 后面是实参列表, 如果方法没有返回值, 它的返回值是null</span><br>System.out.println(retValue);<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123; <span class="hljs-comment">// 类未找到</span><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123; <span class="hljs-comment">// 方法没有找到, 方法名错误或参数列表错误</span><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (SecurityException e) &#123; <span class="hljs-comment">// 安全异常</span><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123; <span class="hljs-comment">// 创建对象时出现异常</span><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123; <span class="hljs-comment">// 非法访问异常</span><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException e) &#123; <span class="hljs-comment">// 非法实参异常, 实参和形参不匹配, 类型和顺序和数量</span><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123; <span class="hljs-comment">// 调用的目标方法内部出现异常了.</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test10</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>Class clazz = Class.forName(<span class="hljs-string">&quot;reflect.Teacher&quot;</span>);<br><span class="hljs-comment">//Object object = clazz.newInstance(); 没有无参构造器时出问题</span><br><br><span class="hljs-comment">//public Teacher(String name, int age, String gender) 要想定位这个构造器, 必须让参数列表一致.</span><br><br><span class="hljs-comment">// 提供形式参数类型列表, 是类模板对象的列表</span><br>Constructor constructor = clazz.getConstructor(String.class, <span class="hljs-keyword">int</span>.class, String.class); <span class="hljs-comment">// 定位合适的构造器</span><br><span class="hljs-comment">// 调用时必须给定实参列表</span><br>Object object = constructor.newInstance(<span class="hljs-string">&quot;程程&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&quot;女&quot;</span>); <span class="hljs-comment">// new Teacher(&quot;程程&quot;, 20, &quot;女&quot;);</span><br>System.out.println(object);<br><br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123; <span class="hljs-comment">// 参数列表出错, 或者方法名出错</span><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (SecurityException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException e) &#123; <span class="hljs-comment">// 方法调用时实参和形参不匹配</span><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test9</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException  </span>&#123;<br><span class="hljs-comment">//FileInputStream fis = new FileInputStream(&quot;只能读当前目录下的文件&quot;);</span><br>ClassLoader classLoader = <span class="hljs-keyword">this</span>.getClass().getClassLoader();<br><span class="hljs-comment">// 只能加载build-path和src下的文件</span><br><span class="hljs-comment">//InputStream inputStream = classLoader.getResourceAsStream(&quot;com/sun/corba/se/impl/logging/LogStrings.properties&quot;); // 读取资源文件, 只要是Build-Path(classpath)中的文件都可以</span><br>InputStream inputStream = classLoader.getResourceAsStream(<span class="hljs-string">&quot;s2&quot;</span>);<br>Properties properties = <span class="hljs-keyword">new</span> Properties();<br>properties.load(inputStream);<br><br>Set&lt;Entry&lt;Object, Object&gt;&gt; entrySet = properties.entrySet();<br><span class="hljs-keyword">for</span> (Entry&lt;Object, Object&gt; entry : entrySet) &#123;<br>System.out.println(entry);<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test8</span><span class="hljs-params">()</span>  </span>&#123;<br>ClassLoader classLoader1 = ClassLoader.getSystemClassLoader(); <span class="hljs-comment">// 获取系统类加载器</span><br>System.out.println(classLoader1);<br>ClassLoader classLoader2 = <span class="hljs-keyword">this</span>.getClass().getClassLoader(); <span class="hljs-comment">// 使用最多的, 获取当前类的类加载器</span><br>System.out.println(classLoader2);<br><br>ClassLoader classLoader3 = classLoader1.getParent(); <span class="hljs-comment">// 获取父 &quot;类加载器&quot;,  是 扩展 &quot;类加载器&quot;</span><br>System.out.println(classLoader3);<br><br>ClassLoader classLoader4 = classLoader3.getParent(); <span class="hljs-comment">// 获取到的是引导类加载器(Bootstrap )</span><br>System.out.println(classLoader4); <span class="hljs-comment">// 这个类加载器无法获取, 无法使用</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">双亲委派机制</span><br><span class="hljs-comment">用户类加载器加载类时, 必须把此加载请求转发给父类加载器, 父类加载器再继续向父类加载器委派, 直到Bootstrap类加载器</span><br><span class="hljs-comment">从Bootstrap类加载器开始真正加载, 各司其职. </span><br><span class="hljs-comment">*/</span><br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test7</span><span class="hljs-params">()</span>  </span>&#123;<br>Class strClazz = String.class;<br>System.out.println(strClazz);<br><br><span class="hljs-comment">// 基本数据类型的类模板只能用第一种方式获取.</span><br>Class clazz1 = <span class="hljs-keyword">int</span>.class; <span class="hljs-comment">// 基本数据类型也有相应的类模板对象, 但是不能获取属性和方法, 只能作为一个标记来使用.</span><br>Class clazz2 = Integer.class; <span class="hljs-comment">// 这是一个普通类模板.</span><br>System.out.println(clazz1 == clazz2);<br><br><span class="hljs-comment">// 判断类模板类型</span><br>System.out.println(<span class="hljs-string">&quot;是否是基本型 : &quot;</span> + clazz1.isPrimitive());<br>System.out.println(<span class="hljs-string">&quot;是否是基本型 : &quot;</span> + clazz2.isPrimitive());<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br><span class="hljs-comment">// 获取类模板对象的方法 ，有４种</span><br><span class="hljs-comment">// 1) 直接通过类.class, 效率最高, 最安全.</span><br>Class clazz1 = Teacher.class;<br><br><span class="hljs-comment">// 2) 根据对象, 调用它的getClass()方法获取, 此方法也很常用.</span><br>Teacher teacher = <span class="hljs-keyword">new</span> Teacher(<span class="hljs-string">&quot;佟刚&quot;</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>Class clazz2 = teacher.getClass();<br><br>System.out.println(clazz1 == clazz2);<br><br><span class="hljs-comment">// 3) 反射中最常用的 Class.forName(&quot;全限定类名&quot;);</span><br>Class clazz3 = Class.forName(<span class="hljs-string">&quot;reflect.Teacher&quot;</span>);<br>System.out.println(clazz2 == clazz3);<br><br><span class="hljs-comment">// 4) 通过类加载器对象动态加载类</span><br>ClassLoader classLoader = <span class="hljs-keyword">this</span>.getClass().getClassLoader();<br>Class clazz4 = classLoader.loadClass(<span class="hljs-string">&quot;reflect.Teacher&quot;</span>);<br>System.out.println(clazz3 == clazz4);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>Class clazz = Class.forName(<span class="hljs-string">&quot;reflect.Teacher&quot;</span>);<br>String name = clazz.getName();<br>System.out.println(<span class="hljs-string">&quot;类名 : &quot;</span> + name);<br>System.out.println(<span class="hljs-string">&quot;简单类名 :  &quot;</span> + clazz.getSimpleName());<br>Class superclass = clazz.getSuperclass();<br>System.out.println(<span class="hljs-string">&quot;父类 : &quot;</span> + superclass);<br>Class[] interfaces = clazz.getInterfaces();<br>System.out.println(<span class="hljs-string">&quot;接口列表 &quot;</span>);<br><span class="hljs-keyword">for</span> (Class class1 : interfaces) &#123;<br>System.out.println(class1);<br>&#125;<br><br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>Class clazz = Class.forName(<span class="hljs-string">&quot;reflect.Teacher&quot;</span>);<br>Object object = clazz.newInstance();<br>System.out.println(object);<br><br><span class="hljs-comment">//Field ageField = clazz.getField(&quot;age&quot;); // getField方法只能获取公共的属性, 也包括从父类继承的属性, 不可以获取私有属性</span><br>Field ageField = clazz.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>); <span class="hljs-comment">// 获取本类中声明的任意属性 </span><br><span class="hljs-comment">// 暴力反射!!! 不推荐使用!!</span><br>ageField.setAccessible(<span class="hljs-keyword">true</span>); <span class="hljs-comment">// 设置此属性为可访问的.</span><br>ageField.set(object, <span class="hljs-number">40</span>); <br>System.out.println(ageField.get(object)); <br><br>Field nameField = clazz.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>nameField.setAccessible(<span class="hljs-keyword">true</span>);<br>nameField.set(object, <span class="hljs-string">&quot;佟刚&quot;</span>);<br><br>System.out.println(object);<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123; <span class="hljs-comment">// 查找属性时, 有可能属性名不对, 可能是属性不存在</span><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (SecurityException e) &#123; <span class="hljs-comment">// 如果有安全检查.</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>Class clazz = Class.forName(<span class="hljs-string">&quot;reflect.Teacher&quot;</span>);<br>Object object = clazz.newInstance();<br>System.out.println(object);<br><br><span class="hljs-comment">// 要想使用属性, 1)先获取属性定义对象 2) 配合目标this对象完成对象属性的间接访问.</span><br>Field ageField = clazz.getField(<span class="hljs-string">&quot;age&quot;</span>); <span class="hljs-comment">// 根据属性名获取属性的定义对象</span><br>ageField.set(object, <span class="hljs-number">40</span>); <span class="hljs-comment">// 设置属性值, 相当于 object.age = 40; </span><br>System.out.println(ageField.get(object)); <span class="hljs-comment">// 获取属性值,  相当于 System.out.println(object.age)</span><br><br>Field nameField = clazz.getField(<span class="hljs-string">&quot;name&quot;</span>);<br>nameField.set(object, <span class="hljs-string">&quot;佟刚&quot;</span>); <span class="hljs-comment">// object.name = &quot;佟刚&quot;</span><br><br>Field genderField = clazz.getField(<span class="hljs-string">&quot;gender&quot;</span>);<br>genderField.set(object, <span class="hljs-string">&quot;男&quot;</span>);<br><br>System.out.println(object);<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123; <span class="hljs-comment">// 查找属性时, 有可能属性名不对, 可能是属性不存在</span><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (SecurityException e) &#123; <span class="hljs-comment">// 如果有安全检查.</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">// 软编码, 灵活, 把问题延迟到运行时.</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 干预类的加载, 直接获取类模板对象.</span><br>Class clazz = Class.forName(<span class="hljs-string">&quot;reflect.Teacher&quot;</span>); <span class="hljs-comment">// 类名必须全限定!!!</span><br><span class="hljs-comment">// 通过类模板对象.newInstance创建实体对象</span><br>Object object = clazz.newInstance(); <span class="hljs-comment">// 调用无参构造器创建对象</span><br>System.out.println(object);<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123; <span class="hljs-comment">// 在运行时动态加载类时, 发现没有找到类</span><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123; <span class="hljs-comment">// 在创建对象时出现异常, 可能是构造器不存在</span><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123; <span class="hljs-comment">// 非法访问, 访问权限不够时出现</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">// 编译时必须依赖类, 硬编码</span><br><br><span class="hljs-comment">//Teacher t1 = new Teacher(); // 强烈依赖类</span><br><span class="hljs-comment">//t1.name = &quot;佟刚&quot;;</span><br><span class="hljs-comment">//t1.age = 40;</span><br><span class="hljs-comment">//t1.gender = &quot;男&quot;;</span><br><br><span class="hljs-comment">//System.out.println(t1.name);</span><br><span class="hljs-comment">//System.out.println(t1.age);</span><br><span class="hljs-comment">//System.out.println(t1.gender);</span><br><br><span class="hljs-comment">//System.out.println(t1);</span><br><br>Teacher t2 = <span class="hljs-keyword">new</span> Teacher(<span class="hljs-string">&quot;程程&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&quot;女&quot;</span>);<br>System.out.println(t2);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test0</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 测试方法所在的线程永远是守护线程</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 守护线程, setDaemon(true); 此方法必须在start()以前调用.</span><br><span class="hljs-comment">// 主线程永远是用户线程</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程基础</title>
    <link href="/2021/04/20/multithreading/"/>
    <url>/2021/04/20/multithreading/</url>
    
    <content type="html"><![CDATA[<h1 id="Java多线程"><a href="#Java多线程" class="headerlink" title="Java多线程"></a>Java多线程</h1><h2 id="1-程序，进程，线程"><a href="#1-程序，进程，线程" class="headerlink" title="1.程序，进程，线程"></a>1.程序，进程，线程</h2><blockquote><ul><li>程序：（可以执行的静态代码，是保存在硬盘上的一个文件）是为完成特定任务，用某种语言编写的一组指令的集合。即<em><strong>一段静态的代码</strong></em>，静态对象.</li><li>进程：（正在执行中的一个程序，在内存中处于激活状态，有生命周期）是程序的一次执行过程，或是<em><strong>正在运行的一个程序</strong></em>。动态过程：有它自身的产生、存在和消亡的过程</li><li>线程：（进程中的子任务）进程可以进一步细化为线程，是一个程序内部的一条执行路径</li></ul></blockquote><h2 id="2-Java中多线程的创建和使用"><a href="#2-Java中多线程的创建和使用" class="headerlink" title="2.Java中多线程的创建和使用"></a>2.Java中多线程的创建和使用</h2><blockquote><ul><li>实现Runnable接口与继承Thread类</li><li><h3 id="Thread类的主要方法"><a href="#Thread类的主要方法" class="headerlink" title="Thread类的主要方法"></a>Thread类的主要方法</h3><blockquote><ul><li>每个线程都是通过某个特定Thread对象的run()方法来完成操作的，经常把run()方法的主题称为线程体</li><li>通过该Thread对象的start()方法来调用这个线程</li><li>static Thread currentThread(),返回当前方法正在执行此方法所压入的栈的线程对象</li><li>void join()它的作用是调用此方法的另一个线程阻塞，当前线程执行完再执行另一个线程</li><li>static void sleep(long millis)作用是让当前线程（正在执行此方法的栈的线程）进入睡眠状态<blockquote><ul><li>两种方式结束sleep状态：1.时间到了。2.被其他进程打断 interrupt() 方法</li></ul></blockquote></li></ul></blockquote></li></ul></blockquote><h3 id="创建并启动线程的方式"><a href="#创建并启动线程的方式" class="headerlink" title="创建并启动线程的方式"></a>创建并启动线程的方式</h3><h4 id="实现Runnable的方式"><a href="#实现Runnable的方式" class="headerlink" title="实现Runnable的方式"></a>实现Runnable的方式</h4><blockquote><blockquote><ol><li>写一个具体类，实现Runnable接口，并实现接口中的抽象方法run(),这个run方法就是线程体</li><li>创建这个具体类对象，并把这个对象作为实参，创建Thread线程对象</li><li>调用Thread线程对象的start方法</li></ol><ul><li>代码示例</li></ul></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> multi_thread;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">200</span>;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(cnt);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br><span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;&quot;</span>) &#123;<span class="hljs-comment">// ()中是一个锁对象，任意对象都可以做锁，称为互斥锁，作用是只允许一个线程进入执行，其他线程等待</span><br><br>cnt -= <span class="hljs-number">2</span>;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">10</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + cnt);<br>&#125;<br>&#125;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> multi_thread;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CounterTest</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Runnable counter = <span class="hljs-keyword">new</span> Counter();<br>Thread thread1 = <span class="hljs-keyword">new</span> Thread(counter);<br>Thread thread2 = <span class="hljs-keyword">new</span> Thread(counter);<br>thread1.start();<br>thread2.start();<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="继承Thread的方式"><a href="#继承Thread的方式" class="headerlink" title="继承Thread的方式"></a>继承Thread的方式</h4><blockquote><blockquote><ol><li>写一个类，继承Thread,并重写run方法，此方法就是线程体</li><li>创建这个类的对象，相当于创建了线程对象</li><li>调用这个线程对象的start方法</li></ol><ul><li>代码示例</li></ul></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> multi_thread;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++) &#123;<br>System.out.println(currentThread().getName()+<span class="hljs-string">&quot; &quot;</span>+i);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest2</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Thread myThread1 = <span class="hljs-keyword">new</span> MyThread();<br>myThread1.start();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;-----main &quot;</span>+i);<br>&#125;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="使用callable接口创建多线程"><a href="#使用callable接口创建多线程" class="headerlink" title="使用callable接口创建多线程"></a>使用callable接口创建多线程</h4><blockquote><ul><li>落地方法call()</li><li>Callable接口作为JDK1.5新增的接口，与使用Runnable相比其功能更强大些。</li><li>相比run()方法，可以有返回值</li><li>方法可以抛出异常</li><li>支持泛型的返回值</li><li>需要借助FutureTask类，比如获取返回结果。</li><li>Callable接口一般用于配合ExecutorService使用</li></ul></blockquote><h5 id="Feture接口"><a href="#Feture接口" class="headerlink" title="Feture接口"></a>Feture接口</h5><blockquote><ul><li>可以对具体Runnable、Callable任务的执行结果进行取消、查询是否完成、获取结果等。</li><li>FutrueTask是Futrue接口的实现类</li><li>FutureTask 同时实现了Runnable, Future接口。它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值。</li><li>多个线程同时执行一个FutureTask，只要一个线程执行完毕，其他线程不会再执行其call()方法。</li><li>get()方法会阻塞当前线程！<br>实例代码:</li></ul></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">class</span> MyThread implements Callable&lt;<span class="hljs-type">Integer</span>&gt; &#123;<br>@Override<br><span class="hljs-built_in">public</span> <span class="hljs-type">Integer</span> <span class="hljs-keyword">call</span>() throws <span class="hljs-keyword">Exception</span> &#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName()+&quot; Come in call&quot;);<br>//睡<span class="hljs-number">5</span>秒<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">5</span>);<br>//返回<span class="hljs-number">200</span>的状态码<br><span class="hljs-keyword">return</span> <span class="hljs-number">200</span>;<br><br>&#125;<br>&#125;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> CallableTest &#123;<br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) throws InterruptedException, ExecutionException &#123;<br>MyThread myThread = <span class="hljs-built_in">new</span> MyThread();<br>FutureTask&lt;<span class="hljs-type">Integer</span>&gt; futureTask = <span class="hljs-built_in">new</span> FutureTask&lt;&gt;(myThread);<br><span class="hljs-built_in">new</span> Thread(futureTask, &quot;未来任务&quot;).<span class="hljs-keyword">start</span>();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;主线程结束！&quot;);<br><span class="hljs-type">Integer</span> <span class="hljs-type">integer</span> = futureTask.<span class="hljs-keyword">get</span>();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-type">integer</span>);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="线程池创建多线程"><a href="#线程池创建多线程" class="headerlink" title="线程池创建多线程"></a>线程池创建多线程</h4><blockquote><ul><li>线程池：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。因此提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。</li><li>优点<blockquote><ol><li>提高响应速度（减少了创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li><li>便于线程管理    </li></ol></blockquote></li><li>ExecutorService：真正的线程池接口。常见子类ThreadPoolExecutor。</li><li>void execute(Runnable command) ：执行任务/命令，没有返回值，一般用来执行Runnable</li><li><T> Future<T> submit(Callable<T> task)：执行任务，有返回值，一般用来执行Callable</li><li>void shutdown() ：关闭连接池</li><li>创建线程池的方式：<blockquote><ol><li>直接通过ThreadPoolExecutor实现类new</li><li>通过工厂类Executors的静态方法创建，本质上也是通过1)创建的线程池</li></ol></blockquote></li></ul></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br><span class="hljs-comment">//创建一个包含10个线程的线程池</span><br>ExecutorService executorService = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Executors</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">FixedThreadPool(10)</span>;<br><span class="hljs-comment">//ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">12</span>; i++) &#123;<br>executorService.execute(<span class="hljs-literal">()</span>-&gt;&#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span>);<br>&#125;);<br>&#125;<br>executorService.shutdown<span class="hljs-literal">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-线程的同步"><a href="#3-线程的同步" class="headerlink" title="3.线程的同步"></a>3.线程的同步</h2><blockquote><ul><li>synchronized (lock){}</li><li>()中是一个锁对象，任意对象都可以做锁，称为互斥锁，作用是只允许一个线程进入执行，其他线程等待</li><li>具有原子性，不可分割</li><li>synchronized()可重入锁（同一个线程可以无限次获取同一个锁）</li><li>避免死锁：不要嵌套synchronized，即使有嵌套，锁对象尽量少</li></ul></blockquote><h3 id="synchronized和Lock的区别"><a href="#synchronized和Lock的区别" class="headerlink" title="synchronized和Lock的区别"></a>synchronized和Lock的区别</h3><blockquote><ul><li>synchronized不需要手动上锁和解锁，lock需要手动上锁和解锁</li><li>synchronized能实现的功能lock都可以实现，且lock更加强大</li></ul></blockquote><h2 id="JUC工具类"><a href="#JUC工具类" class="headerlink" title="JUC工具类"></a>JUC工具类</h2><h3 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">package com.atguigu.juc;<br><br>import java.util.concurrent.ExecutorService;<br>import java.util.concurrent.Executors;<br>import java.util.concurrent.locks.ReadWriteLock;<br>import java.util.concurrent.locks.ReentrantReadWriteLock;<br><br><span class="hljs-keyword">class</span> MyQueue &#123;<br><span class="hljs-comment">// 创建读写锁</span><br>ReadWriteLock rwl = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ReentrantReadWriteLock()</span>;<br><br><span class="hljs-keyword">private</span> Object obj;<br><br>public void read<span class="hljs-constructor">Obj()</span> &#123;<br><span class="hljs-comment">// 上读锁</span><br>rwl.read<span class="hljs-constructor">Lock()</span>.lock<span class="hljs-literal">()</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;当前线程读到的内容是：&quot;</span> + obj);<br><br>&#125; finally &#123;<br><span class="hljs-comment">// 解读锁</span><br>rwl.read<span class="hljs-constructor">Lock()</span>.unlock<span class="hljs-literal">()</span>;<br>&#125;<br>&#125;<br><br>public void write<span class="hljs-constructor">Obj(Object <span class="hljs-params">obj</span>)</span> &#123;<br><span class="hljs-comment">// 上写锁</span><br>rwl.write<span class="hljs-constructor">Lock()</span>.lock<span class="hljs-literal">()</span>;<br><span class="hljs-keyword">try</span> &#123;<br>this.obj = obj;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;当前线程写入的内容是：&quot;</span> + obj);<br>&#125; finally &#123;<br><span class="hljs-comment">// 解写锁</span><br>rwl.write<span class="hljs-constructor">Lock()</span>.unlock<span class="hljs-literal">()</span>;<br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @Description: 一个线程写入,100个线程读取</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> ReadWriteLockDemo &#123;<br>public static void main(String<span class="hljs-literal">[]</span> args) throws InterruptedException &#123;<br><span class="hljs-comment">// 创建资源对象</span><br>MyQueue mq = <span class="hljs-keyword">new</span> <span class="hljs-constructor">MyQueue()</span>;<br><span class="hljs-comment">// 一个线程写入</span><br><span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(()</span> -&gt; &#123;<br>mq.write<span class="hljs-constructor">Obj(<span class="hljs-string">&quot;写入的内容&quot;</span>)</span>;<br>&#125;, <span class="hljs-string">&quot;AA&quot;</span>).start<span class="hljs-literal">()</span>;<br><span class="hljs-comment">// 100个线程读取</span><br>ExecutorService executorService = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Executors</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">FixedThreadPool(100)</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>executorService.execute(<span class="hljs-literal">()</span> -&gt; &#123;<br>mq.read<span class="hljs-constructor">Obj()</span>;<br>&#125;);<br>&#125;<br>executorService.shutdown<span class="hljs-literal">()</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">package com.atguigu.juc;<br><br>import java.util.concurrent.CountDownLatch;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @Description:</span><br><span class="hljs-comment"> *  *让一些线程阻塞直到另一些线程完成一系列操作后才被唤醒。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 解释：6个同学陆续离开教室后值班同学才可以关门。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * main主线程必须要等前面6个线程完成全部工作后，自己才能开干 </span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> CountDownLatchDemo<br>&#123;<br>public static void main(String<span class="hljs-literal">[]</span> args) throws InterruptedException<br>&#123;<br>CountDownLatch cd = <span class="hljs-keyword">new</span> <span class="hljs-constructor">CountDownLatch(6)</span>;<br><span class="hljs-comment">//6个同学离开教室</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">6</span>; i++) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(()</span>-&gt;&#123;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span>+<span class="hljs-string">&quot;号同学离开教室&quot;</span>);&#125;, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-params">i</span>)</span>).start<span class="hljs-literal">()</span>;<br><span class="hljs-comment">//减少计数</span><br>cd.count<span class="hljs-constructor">Down()</span>;<br>&#125;<br><span class="hljs-comment">//等待</span><br>cd.await<span class="hljs-literal">()</span>;<br><span class="hljs-comment">//班长锁门</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span>+<span class="hljs-string">&quot;班长锁门&quot;</span>);<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package com.atguigu.juc;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.BrokenBarrierException;<br><span class="hljs-keyword">import</span> java.util.concurrent.CyclicBarrier;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @Description: TODO(这里用一句话描述这个类的作用)  </span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * CyclicBarrier</span><br><span class="hljs-comment"> * 的字面意思是可循环（Cyclic）使用的屏障（Barrier）。它要做的事情是，</span><br><span class="hljs-comment"> * 让一组线程到达一个屏障（也可以叫同步点）时被阻塞，</span><br><span class="hljs-comment"> * 直到最后一个线程到达屏障时，屏障才会开门，所有</span><br><span class="hljs-comment"> * 被屏障拦截的线程才会继续干活。</span><br><span class="hljs-comment"> * 线程进入屏障通过CyclicBarrier的await()方法。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 集齐7颗龙珠就可以召唤神龙</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CyclicBarrierDemo</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> NUMBER = <span class="hljs-number">7</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//CyclicBarrier(int parties, Runnable barrierAction) </span><br>CyclicBarrier cb = <span class="hljs-keyword">new</span> CyclicBarrier(NUMBER, ()-&gt; &#123;System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;可以召唤神龙了&quot;</span>);&#125;);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=NUMBER;i++) &#123;<br><span class="hljs-keyword">new</span> Thread(()-&gt;&#123;System.out.<span class="hljs-built_in">println</span>(Thread.currentThread().getName()+<span class="hljs-string">&quot;号被收集&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br>cb.await();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <br>&#125;,<span class="hljs-keyword">String</span>.valueOf(i) ).start();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">package com.atguigu.juc;<br><br>import java.util.Random;<br>import java.util.concurrent.Semaphore;<br>import java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @Description: TODO(这里用一句话描述这个类的作用)</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> *               在信号量上我们定义两种操作： acquire（获取）</span><br><span class="hljs-comment"> *               当一个线程调用acquire操作时，它要么通过成功获取信号量（信号量减1）， 要么一直等下去，直到有线程释放信号量，或超时。</span><br><span class="hljs-comment"> *               release（释放）实际上会将信号量的值加1，然后唤醒等待的线程。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> *               信号量主要用于两个目的，一个是用于多个共享资源的互斥使用，另一个用于并发线程数的控制。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> *               情景：3个停车位，6部汽车争抢车位</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> SemaphoreDemo &#123;<br>public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br><span class="hljs-comment">// 3个停车位</span><br>Semaphore semaphore = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Semaphore(3)</span>;<br><span class="hljs-comment">// 6部汽车抢车位</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">6</span>; i++) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(()</span> -&gt; &#123;<br><span class="hljs-comment">// 获取资源</span><br><span class="hljs-keyword">try</span> &#123;<br>semaphore.acquire<span class="hljs-literal">()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;号驶入停车位&quot;</span>);<br><span class="hljs-comment">// 停车3秒</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TimeUnit</span>.</span><span class="hljs-module"><span class="hljs-identifier">SECONDS</span>.</span></span>sleep(<span class="hljs-number">3</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;号驶出停车位&quot;</span>);<br><span class="hljs-comment">// 释放资源</span><br>semaphore.release<span class="hljs-literal">()</span>;<br>&#125; catch (Exception e) &#123;<br>e.print<span class="hljs-constructor">StackTrace()</span>;<br>&#125;<br>&#125;, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-params">i</span>)</span>).start<span class="hljs-literal">()</span>;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java杂记</title>
    <link href="/2021/04/14/Java-mutirecord/"/>
    <url>/2021/04/14/Java-mutirecord/</url>
    
    <content type="html"><![CDATA[<h1 id="Java杂记"><a href="#Java杂记" class="headerlink" title="Java杂记"></a>Java杂记</h1><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li><h3 id="异常定义"><a href="#异常定义" class="headerlink" title="异常定义"></a>异常定义</h3></li><li>程序在运行时有可能出现的非正常状况，会导致程序崩溃 </li><li><h3 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h3></li><li><h4 id="按程度分："><a href="#按程度分：" class="headerlink" title="按程度分："></a>按程度分：</h4></li><li>Error：虚拟机都无法处理的错误状况</li><li>Exception：一般性的问题     </li><li><h4 id="按照处理方式为分："><a href="#按照处理方式为分：" class="headerlink" title="按照处理方式为分："></a>按照处理方式为分：</h4></li><li>受检异常，在程序中必须对其进行处理的异常，如果不处理，编译出错</li><li>Exception及其子类，RuntimeException及其子类除外：问题程序不容忽视         </li><li>非受检异常 在程序中不是必须对其进行处理的异常</li><li>Error及其子类：太严重了 </li><li>RuntimeException及其子类：太轻微了</li><li><h3 id="异常处理："><a href="#异常处理：" class="headerlink" title="异常处理："></a>异常处理：</h3></li><li><h3 id="1）捕获-try-catch-try-可能抛出异常的语句-catch-可能的异常类型-引用-通过异常处理异常对象"><a href="#1）捕获-try-catch-try-可能抛出异常的语句-catch-可能的异常类型-引用-通过异常处理异常对象" class="headerlink" title="1）捕获 try catch try{ 可能抛出异常的语句 }catch(可能的异常类型 引用){ 通过异常处理异常对象 }"></a>1）捕获 try catch try{ 可能抛出异常的语句 }catch(可能的异常类型 引用){ 通过异常处理异常对象 }</h3></li><li><h3 id="2）异常抛出-在方法中使用throw异常对象，方法一旦执行了throw和执行return效果是一样的，都会导致方法结束"><a href="#2）异常抛出-在方法中使用throw异常对象，方法一旦执行了throw和执行return效果是一样的，都会导致方法结束" class="headerlink" title="2）异常抛出 在方法中使用throw异常对象，方法一旦执行了throw和执行return效果是一样的，都会导致方法结束"></a>2）异常抛出 在方法中使用throw异常对象，方法一旦执行了throw和执行return效果是一样的，都会导致方法结束</h3></li><li>return时正常结束返回，throw时异常结束返回 </li><li>在签名中使用throws，可能的异常类型列表，警告调用者，调用此方法有风险，请考虑清楚</li><li>方法中的throw作用是真的产生破环</li><li><h3 id="3）先捕获再抛出"><a href="#3）先捕获再抛出" class="headerlink" title="3）先捕获再抛出"></a>3）先捕获再抛出</h3></li><li>在方法中先尝试执行某代码，如果真的出现了异常，再把这个异常关联到自定义异常对象中，再抛出自定义异常对象       </li><li>异常处理的选择：</li><li>入口方法尽量捕获（这个方法出问题会不会影响栈）</li><li>普通方法尽量抛出</li><li>如果代码中有潜在风险，尽量先捕再抛</li><li>如果代码中没有风险，但是有时不满足方法继续的条件时，直接抛出<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2></li><li>volatile :提醒子线程，此主存中的属性不要制作副本…</li></ul><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="冒泡排序："><a href="#冒泡排序：" class="headerlink" title="冒泡排序："></a>冒泡排序：</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++) &#123;<br>arr[i]=(<span class="hljs-keyword">int</span>)(Math.random()*<span class="hljs-number">20</span>);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> tmp:arr) &#123;<br>System.out.print(tmp+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.println();<br><span class="hljs-comment">//冒泡排序</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length-<span class="hljs-number">1</span>;i++) &#123;<span class="hljs-comment">//控制趟数</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;arr.length-<span class="hljs-number">1</span>-i;j++) &#123;<span class="hljs-comment">//控制每一趟的交换次数，应该随着外循环的增加而减少</span><br><span class="hljs-keyword">if</span>(arr[j]&gt;arr[j+<span class="hljs-number">1</span>]) &#123;<span class="hljs-comment">//比较相邻元素，满足条件，则交换.</span><br><span class="hljs-keyword">int</span> tmp=arr[j];<br>arr[j]=arr[j+<span class="hljs-number">1</span>];<br>arr[j+<span class="hljs-number">1</span>]=tmp;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> tmp:arr) &#123;<br>System.out.print(tmp+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.println();<br></code></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr1=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr1.length;i++) &#123;<br>arr1[i]=(<span class="hljs-keyword">int</span>)(Math.random()*<span class="hljs-number">20</span>);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> tmp:arr1) &#123;<br>System.out.print(tmp+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.println();<br><span class="hljs-comment">//选择排序</span><br><span class="hljs-keyword">int</span> minindex;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr1.length-<span class="hljs-number">1</span>;i++) &#123;<span class="hljs-comment">//从0开始到倒数第二个位置</span><br>minindex=i;<span class="hljs-comment">//最小下标先默认等于i</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>;j&lt;arr1.length;j++) &#123;<span class="hljs-comment">//遍历从i+1开始到数组长度的所有数</span><br><span class="hljs-keyword">if</span>(arr1[j]&lt;arr1[minindex]) &#123;<span class="hljs-comment">//找最小值</span><br>minindex=j;<span class="hljs-comment">//更新最小下标</span><br>&#125;<br>&#125;<br><span class="hljs-comment">//交换元素，实现最小值赋值到基准位置i</span><br><span class="hljs-keyword">int</span> tmp=arr1[i];<br>arr1[i]=arr1[minindex];<br>arr1[minindex]=tmp;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> tmp:arr1) &#123;<br>System.out.print(tmp+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.println();<br></code></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuickSort</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quick</span><span class="hljs-params">(<span class="hljs-keyword">int</span> []arr,<span class="hljs-keyword">int</span> begin,<span class="hljs-keyword">int</span> end)</span> </span>&#123;<span class="hljs-comment">//结束索引不包含</span><br><span class="hljs-keyword">if</span>(end-begin&lt;=<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//递归结束条件</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//分区，分三个部分，中间是键，左边比键小，右边比键大</span><br><span class="hljs-comment">//定位索引最关键</span><br><span class="hljs-keyword">int</span> key=arr[begin];<span class="hljs-comment">//总是取第一个元素为键值</span><br><span class="hljs-keyword">int</span> keyIndex=begin;<span class="hljs-comment">// 键索引值，用于动态保存比键值小的值的索引</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=begin+<span class="hljs-number">1</span>;i&lt;end;i++) &#123;<br><span class="hljs-keyword">if</span>(arr[i]&lt;key) &#123;<br>keyIndex++;<span class="hljs-comment">//只要找到比key小的数据，keyIndex就往右移</span><br><span class="hljs-comment">//交换下标为keyIndex和i位置的数据</span><br><span class="hljs-keyword">int</span> tmp=arr[keyIndex];<br>arr[keyIndex]=arr[i];<span class="hljs-comment">//保证比键小的值在键的右面依次保存</span><br>arr[i]=tmp;<br>&#125;<br>&#125;<br><span class="hljs-comment">//让键值归为到keyIndex位置处</span><br>arr[begin]=arr[keyIndex];<br>arr[keyIndex]=key;<br><span class="hljs-comment">//左子列递归</span><br>quick(arr,begin,keyIndex-<span class="hljs-number">1</span>);<br><span class="hljs-comment">//右子列递归</span><br> quick(arr,keyIndex+<span class="hljs-number">1</span>,end);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++) &#123;<br>arr[i]=(<span class="hljs-keyword">int</span>)(Math.random()*<span class="hljs-number">20</span>);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> tmp:arr) &#123;<br>System.out.print(tmp+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.println();<br>quick(arr,<span class="hljs-number">0</span>,arr.length);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> tmp:arr) &#123;<br>System.out.print(tmp+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-keyword">import</span> javax.lang.model.element.Element;<br><br><span class="hljs-keyword">import</span> jdk.jfr.Registered;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 注解的处理只能通过反射，要想反射，必须使用元注解<span class="hljs-doctag">@Retention</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Hasee</span><br><span class="hljs-comment"> *注解：是一种特殊的注释，不参与程序的执行，特殊之处在于编译器和JVM都可以识别它.</span><br><span class="hljs-comment"> *<span class="hljs-doctag">@Override</span> 作用是告诉编译器，它修饰的方法要完成方法覆盖，请帮助做条件检查，只能修饰方法</span><br><span class="hljs-comment"> *<span class="hljs-doctag">@Deprecated</span> 作用是警告使用者，它修饰的目标过期了，可以修饰类，属性，方法，构造器，形参，局部变量</span><br><span class="hljs-comment"> *<span class="hljs-doctag">@SuppressWarnings</span> 作用是抑制编译器警告，并且可以传递参数，参数可以是一个值也可以是一个数组</span><br><span class="hljs-comment"> *注解：</span><br><span class="hljs-comment"> *1）没有属性的，称为标记型注解</span><br><span class="hljs-comment"> *2）有属性的，可以进一步传递数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-comment">//自定义注解,默认可以修饰类，属性，构造器，方法，形参，局部变量</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-comment">//只有注解的停留期定义在运行时才可以被反射</span><br><span class="hljs-meta">@interface</span> MyAnnotation&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">int</span> <span class="hljs-title">id</span><span class="hljs-params">()</span><span class="hljs-keyword">default</span> 10</span>;<br><span class="hljs-function">String <span class="hljs-title">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;我是缺省值&quot;</span>;<span class="hljs-comment">//可以有缺省值</span><br><span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;qaq&quot;</span>;<span class="hljs-comment">//当属性名为value()时可以省略属性名</span><br>&#125;<br><span class="hljs-meta">@MyAnnotation(id = 0, name = &quot;sda&quot;)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><span class="hljs-keyword">private</span> String gender;<br><span class="hljs-meta">@SuppressWarnings(&quot;unused&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> n;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br><br>&#125;<br><span class="hljs-meta">@MyAnnotation</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age, String gender)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.age = age;<br><span class="hljs-keyword">this</span>.gender = gender;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person [name=&quot;</span> + name + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&quot;, gender=&quot;</span> + gender + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-meta">@MyAnnotation(&quot;aqa&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.age = age;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getGender</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> gender;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGender</span><span class="hljs-params">(String gender)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.gender = gender;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationTest</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="路径问题："><a href="#路径问题：" class="headerlink" title="路径问题："></a>路径问题：</h2><blockquote><ul><li>绝对路径：以根目录为开始的路径</li><li>相对路径：以当前目录未开始的路径（./）</li></ul></blockquote><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 泛型要解决类型安全问题</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&lt;<span class="hljs-title">X</span>&gt; </span>&#123; <span class="hljs-comment">// X表示某种类型, X在这里称为泛型的类型参数(是一个形参)</span><br><span class="hljs-comment">// X类型的真实类型会在创建对象时确定下来, 隶属于对象的存在而存在.</span><br><br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> X info;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, X info)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.info = info;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> X <span class="hljs-title">getInfo</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> info;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setInfo</span><span class="hljs-params">(X info)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.info = info;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person [name=&quot;</span> + name + <span class="hljs-string">&quot;, info=&quot;</span> + info + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//在静态方法中不可以使用泛型类中的泛型</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(X x)</span> </span>&#123;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 泛型和继承之间的关系</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>&lt;<span class="hljs-title">Y</span>&gt; </span>&#123;<br><span class="hljs-keyword">private</span> Y y;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Y <span class="hljs-title">getY</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> y;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span> </span>&#123;&#125; <span class="hljs-comment">// 子类中没有处理父类的泛型. 泛型类型就是类型最模糊的Object, 这种不好</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123;&#125; <span class="hljs-comment">// 子类在继承时把父类的泛型写死了 ,  这是最简单</span><br><span class="hljs-comment">//class B3 extends A&lt;Teacher&gt; &#123;&#125; // 在创建子类对象后, 其泛型是固定的.</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B4</span>&lt;<span class="hljs-title">Y</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span>&lt;<span class="hljs-title">Y</span>&gt; </span>&#123;&#125; <span class="hljs-comment">// 子类在继承时仍然继续泛型, 这是最灵活</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericMethod</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(T t)</span> </span>&#123;<br>&#125;<br><br><span class="hljs-comment">//public Object get(Object obj) &#123;</span><br><span class="hljs-comment">// 泛型方法中必须传入泛型类型的参数, 如果不传泛型永远无法确定.</span><br><span class="hljs-comment">// 这个泛型类型由实参的类型来决定, 所以它是和方法的某次调用相关</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;E&gt; <span class="hljs-function">E <span class="hljs-title">get</span><span class="hljs-params">(E e)</span> </span>&#123; <span class="hljs-comment">// E表示只可以在此方法中使用的某种类型</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericTest</span> </span>&#123;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//Object object = GenericMethod.get();</span><br>String string = GenericMethod.get(<span class="hljs-string">&quot;abc&quot;</span>); <span class="hljs-comment">// 泛型方法必须通过实参来告诉方法, 泛型的具体类型是什么</span><br>Integer integer = GenericMethod.get(<span class="hljs-number">200</span>);<br>Boolean boolean1 = GenericMethod.get(<span class="hljs-keyword">false</span>);<br>Object object = GenericMethod.get(<span class="hljs-keyword">null</span>); <span class="hljs-comment">// 如果实参是null, 将会导致泛型类型无法感知!!! </span><br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span> </span>&#123;<br>B1 b1 = <span class="hljs-keyword">new</span> B1();<br>Object y = b1.getY();<br><br>Integer y2 = <span class="hljs-keyword">new</span> B2().getY();<br>Integer y3 = <span class="hljs-keyword">new</span> B2().getY();<br><br><span class="hljs-comment">//Teacher y4 = new B3().getY();</span><br><br>B4 b4 = <span class="hljs-keyword">new</span> B4();<br>Object y5 = b4.getY();<br>Double y6 = <span class="hljs-keyword">new</span> B4&lt;Double&gt;().getY();<br>String y7 = <span class="hljs-keyword">new</span> B4&lt;String&gt;().getY();<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br>Person&lt;Integer&gt; person1 = <span class="hljs-keyword">new</span> Person&lt;Integer&gt;(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">20</span>); <span class="hljs-comment">// 使用了泛型后, 类型就安全了.</span><br>Integer info1 = person1.getInfo(); <span class="hljs-comment">// 获取到的属性也安全了, 清晰了.</span><br><br>Person&lt;Boolean&gt; person2 = <span class="hljs-keyword">new</span> Person&lt;Boolean&gt;(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-keyword">true</span>);<br>Boolean info2 = person2.getInfo();<br><br>Person person3 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">3.22</span>);<br>Object info3 = person3.getInfo();<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>Person person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">30</span>);<br>Object info1 = person1.getInfo();<br><br>Person person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>);<br>Object info2 = person2.getInfo();<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>List list1 = <span class="hljs-keyword">new</span> ArrayList();<br>list1.add(<span class="hljs-number">1</span>);<br>list1.add(<span class="hljs-string">&quot;abc&quot;</span>);<br><br>Object object = list1.get(<span class="hljs-number">0</span>);<br><br>List&lt;Integer&gt; list2 = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>list2.add(<span class="hljs-number">3</span>);<br><span class="hljs-comment">//list2.add(&quot;abc&quot;);</span><br><br>List&lt;Object&gt; list3 = <span class="hljs-keyword">new</span> ArrayList&lt;Object&gt;();<br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> collection;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Collection 集合 : 保存一个一个的对象, 特点 : 无序可重复</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Set 特点 : 无序不可重复</span><br><span class="hljs-comment"> * HashSet : 基于数组使用哈希算法实现的Set集合, 判定重复的标准是两个对象的equals为true, 并且两个对象的hashCode一样</span><br><span class="hljs-comment"> * 优点 : 全是优点</span><br><span class="hljs-comment"> * 缺点 : 对内存要求高</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * TreeSet : 基于二叉搜索树(红黑树)实现的Set集合, 判定重复的标准是两个对象的比较结果为0</span><br><span class="hljs-comment"> * 优点 : 对内存要求低, 搜索速度快</span><br><span class="hljs-comment"> * 缺点 : 插入和删除的速度慢，大量元素的比较和树的旋转</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * List : 特点 : 有序可重复</span><br><span class="hljs-comment"> * ArrayList : 基于数组实现的List集合, 线程不安全.</span><br><span class="hljs-comment"> * 缺点 : 对内存要求高, 因为内存必须连续, 非末端数据的插入和删除都是最慢的, 因为有大量元素的移动.</span><br><span class="hljs-comment"> * 优点 : 末端插入删除速度快</span><br><span class="hljs-comment"> * 适用场景 : 存档数据, 主要用于查询检索</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * Vector : 和ArrayList一样, 是一个古老的实现. 但是线程安全</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * LinkedList : 基于链表实现的List集合</span><br><span class="hljs-comment"> * 优点 : 对内存要求低. 插入,删除速度非常快</span><br><span class="hljs-comment"> * 缺点 : 检索速度慢,</span><br><span class="hljs-comment"> * 适用场景 : 频繁修改数据, 很少检索</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> *泛型 : 类型安全问题, 在集合中使用泛型的好处是约束中的元素的数据类型, 类型可以是确定的, 不再是类型最模糊的Object</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *遍历 : 增强for</span><br><span class="hljs-comment"> *for (元素数据类型 临时变量 : 集合) &#123;</span><br><span class="hljs-comment"> *&#125;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  迭代器 Iterator</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> 必须从集合对象获取迭代器</span><br><span class="hljs-comment"> while (迭代器.hasNext()) &#123;</span><br><span class="hljs-comment"> 元素 = 迭代器.next();</span><br><span class="hljs-comment"> 处理元素;</span><br><span class="hljs-comment"> &#125;</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> Map集合 : 保存的是一对一对的对象. 是具有映射关系的键值对象, 键值对象都可以是任意对象. 键到值是单向一对一映射.</span><br><span class="hljs-comment"> Map可以简单地看作是一个词典, 键是词条, 值是解释.</span><br><span class="hljs-comment"> Object put(Object key, Object value); //写入条目</span><br><span class="hljs-comment"> Object remove(Object key); // 根据键删除 一个条目</span><br><span class="hljs-comment"> Object get(Object key); // 根据键查找值, 查词典</span><br><span class="hljs-comment"> Set keySet(); // 获取一个保存所有键对象的Set子集合</span><br><span class="hljs-comment"> Set entrySet(); // 获取保存所有条件对象的Set集合</span><br><span class="hljs-comment"> int size() ; 条目个数</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> HashMap 是典型实现, 使用哈希算法实现的Map集合</span><br><span class="hljs-comment"> TreeMap 是基于二叉树实现的Map集合</span><br><span class="hljs-comment"> Hashtable 是古老的实现, 和HashMap一样, 它是线程安全, 效率低.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span></span>&#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> weight;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Dog</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.age = age;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getWeight</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> weight;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setWeight</span><span class="hljs-params">(<span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.weight = weight;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Dog [name=&quot;</span> + name + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&quot;, weight=&quot;</span> + weight + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Dog</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age, <span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.age = age;<br><span class="hljs-keyword">this</span>.weight = weight;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Object o)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(o <span class="hljs-keyword">instanceof</span> Dog) &#123;<br><span class="hljs-keyword">return</span> ((Dog)o).age-<span class="hljs-keyword">this</span>.age;<br>&#125;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;对象不可比&quot;</span>);<br>&#125;<br> <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollectionTest</span> </span>&#123;<br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br><br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>Set set=<span class="hljs-keyword">new</span> TreeSet();<br>Dog dog1=<span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&quot;小白&quot;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">25</span>);<br>Dog dog2=<span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&quot;小黄&quot;</span>, <span class="hljs-number">6</span>, <span class="hljs-number">50</span>);<br>Dog dog3=<span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&quot;小黑&quot;</span>, <span class="hljs-number">4</span>, <span class="hljs-number">30</span>);<br>Dog dog4=<span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&quot;狗蛋&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">10</span>);<br>set.add(dog1);<br>set.add(dog2);<br>set.add(dog3);<br>set.add(dog4);<br><br><span class="hljs-keyword">for</span> (Object object : set) &#123;<br>System.out.println(object);<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> date;<br><br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.LocalTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><span class="hljs-keyword">import</span> java.util.Calendar;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * LocalDate,LocalTime,LocalDateTime Java8中新提供的处理时间的类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateTest</span> </span>&#123;<br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span> </span>&#123;<br>LocalDateTime of = LocalDateTime.of(<span class="hljs-number">2000</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">10</span>,<span class="hljs-number">1</span>);<br>System.out.println(of);<br>DateTimeFormatter dtf = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年MM月dd天&quot;</span>);<br>System.out.println(dtf.format(of));<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span> </span>&#123;<br>LocalTime time=LocalTime.now();<br>System.out.println(time);<br>LocalDateTime now = LocalDateTime.now();<br>System.out.println(now);<br>DateTimeFormatter dtf = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>System.out.println(dtf.format(now));<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span> </span>&#123;<br>String str1 = <span class="hljs-string">&quot;abcwerthelloyuiodef &quot;</span>;<br>String str2 = <span class="hljs-string">&quot;cvhellobnm&quot;</span>;<br><span class="hljs-keyword">int</span> length = str2.length();<br>l1: <span class="hljs-keyword">while</span> (length &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> begin = <span class="hljs-number">0</span>; begin + length &lt;= str2.length(); begin++) &#123;<br><span class="hljs-keyword">if</span> (str1.contains(str2.substring(begin, begin + length))) &#123;<br>System.out.println(str2.substring(begin, begin + length));<br><span class="hljs-keyword">break</span> l1;<br>&#125;<br>&#125;<br>length--;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br>LocalDate date = LocalDate.now();<br>System.out.println(date);<br>LocalDate withYear = date.withYear(<span class="hljs-number">2000</span>).withMonth(<span class="hljs-number">8</span>).withDayOfMonth(<span class="hljs-number">10</span>);<br>System.out.println(withYear);<br>LocalDate plusYears = withYear.plusDays(<span class="hljs-number">100</span>);<br>System.out.println(plusYears);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>Calendar instance = Calendar.getInstance();<br><span class="hljs-comment">//</span><br>instance.set(Calendar.YEAR, <span class="hljs-number">2000</span>);<br>instance.set(Calendar.MONTH, <span class="hljs-number">7</span>);<br>instance.set(Calendar.YEAR, <span class="hljs-number">10</span>);<br>System.out.println(instance.getTime());<br>instance.add(Calendar.DAY_OF_MONTH, <span class="hljs-number">100</span>);<br>System.out.println(instance.getTime());<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(System.currentTimeMillis());<span class="hljs-comment">// 距离1970-01-01 00:00:00:000的毫秒数</span><br>Date date = <span class="hljs-keyword">new</span> Date();<br>System.out.println(date);<br>SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>String format = sdf.format(date);<br>System.out.println(format);<br>String string = <span class="hljs-string">&quot;2001-12-06 20:45:19&quot;</span>;<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(sdf.parse(string));<br>&#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="大数"><a href="#大数" class="headerlink" title="大数"></a>大数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> math;<br><br><span class="hljs-keyword">import</span> java.math.BigInteger;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * java中所有字符都是两个字节</span><br><span class="hljs-comment"> * C语言中汉字占两个字节，其他字符1个字节</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MathClassTest</span> </span>&#123;<br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(Math.random());<br>System.out.println(Math.round(-<span class="hljs-number">4.5</span>));<br>BigInteger bi1=<span class="hljs-keyword">new</span> BigInteger(<span class="hljs-string">&quot;41654894789415618977465187416518948651327849816354184894561564897488465415415&quot;</span>);<br>BigInteger bi2=<span class="hljs-keyword">new</span> BigInteger(<span class="hljs-string">&quot;41654894789415641568977465187416518948651327849816354184894561564897488465415415&quot;</span>);<br>System.out.println(bi2.add(bi1));<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> string;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * StringBuffer :内容可以改变的Unicode字符序列，任何修改都不会产生新对象，是内部的数据的变化，效率高</span><br><span class="hljs-comment"> * 是一个容器，是一个可以保存字符的容器，底层仍让使用数组</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * StringBuilder append(...) 在字符串末尾追加任意数据. StringBuilder insert(int index, ...)</span><br><span class="hljs-comment"> * 在指定位置处插入任意新数据 StringBuilder delete(int begin, int end) 删除指定区间的所有字符</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * StringBuffer是线程安全的, 效率低 .</span><br><span class="hljs-comment"> * StringBuilder是线程不安全的, 效率高.(优先使用)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringBuilderTest</span> </span>&#123;<br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>String str=<span class="hljs-keyword">null</span>;<br>StringBuffer sb=<span class="hljs-keyword">new</span> StringBuffer();<br>sb.append(str);<span class="hljs-comment">//如果append null会把null分解成单个字符，加入到StringBuffer中，count+=4</span><br>System.out.println(sb.length());<br>System.out.println(sb);<br>StringBuffer sb1=<span class="hljs-keyword">new</span> StringBuffer(str);<span class="hljs-comment">//空指针错误,无法运行</span><br>System.out.println(sb1);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> string;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 字符串：内容不可改变的Unicode字符的序列，任何对自负床的修改都一定会产生新的字符串对象</span><br><span class="hljs-comment"> * 底层使用byte[]来保存字符，字符串的处理与下标密切相关</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//System.arrycopy(value,0,result,0,value.length)实现从源数组到目标数组的复制</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 字符串 : 内容不可改变的Unicode字符的序列, 任何的对字符串的修改都一定会产生新的字符串对象.</span><br><span class="hljs-comment"> * 底层使用了char[]来保存字符, 字符串的处理和下标密切相关.</span><br><span class="hljs-comment"> * 0 2         12       17        23        29      37 39</span><br><span class="hljs-comment"> * String string = &quot;  abcABXXyy 我喜欢你,你喜欢我吗?我不喜欢你 qqyyZZ123  &quot;;</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * *****public int length() 获取字符串长度(字符数) string.length() =&gt; 40</span><br><span class="hljs-comment">*****public char charAt(int index) 获取参数指定的下标位置处的字符 string.charAt(10) =&gt; y. string.charAt(13) =&gt; 喜</span><br><span class="hljs-comment">public char[] toCharArray() 获取字符串相应的字符数组, 是内部数组的一个副本</span><br><span class="hljs-comment">System.arraycopy(value, 0, result, 0, value.length);</span><br><span class="hljs-comment">// 第一个参数是源数组, </span><br><span class="hljs-comment"> * 第2个参数是源数组开始下标</span><br><span class="hljs-comment">// 第3个参数是目标数组, </span><br><span class="hljs-comment"> * 第4个参数是目标数组的开始复制的下标, </span><br><span class="hljs-comment"> * 第5个参数是总共要复制的元素个数.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment">效果相当于 : </span><br><span class="hljs-comment">for (int i = 0; i &lt; value.length; i++) &#123;</span><br><span class="hljs-comment">result[i] = value[i];</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">****public boolean equals(Object anObject)</span><br><span class="hljs-comment">public int compareTo(String anotherString)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 0 2         12       17        23        29      37 39</span><br><span class="hljs-comment"> * String string = &quot;  abcABXXyy 我喜欢你,你喜欢我吗?我不喜欢你 qqyyZZ123  &quot;;</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment">***public int indexOf(String s), 获取参数中的子串在当前字符串中首次出现的下标值 string.indexOf(&quot;喜欢&quot;) =&gt; 13, 如果搜索失败返回-1</span><br><span class="hljs-comment">public int indexOf(String s ,int startpoint) 获取第2个喜欢 : string.indexOf(&quot;喜欢&quot;, 14) =&gt; 18, </span><br><span class="hljs-comment">  获取第3个喜欢 : string.indexOf(&quot;喜欢&quot;, 19) =&gt; 25,</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">public int lastIndexOf(String s) 从右向左搜索子串出现的下标, string.lastIndexOf(&quot;喜欢&quot;) =&gt; 25</span><br><span class="hljs-comment">public int lastIndexOf(String s ,int startpoint) 获取第2个喜欢 : string.lastIndexOf(&quot;喜欢&quot;, 24) =&gt; 18</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// 通常获取文件列表名, 对文件名进行判断</span><br><span class="hljs-comment">*public boolean startsWith(String prefix) 判断字符串是否以参数中的子串为开始 string.startsWith(&quot;  abc&quot;) =&gt; true</span><br><span class="hljs-comment">*public boolean endsWith(String suffix) 判断字符串是否以参数中的子串为结束 string.endsWith(&quot;123&quot;) =&gt; false</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*****public String substring(int start,int end) 从当前字符串中截取子串, start表示开始下标(包含), end表示结束下标(不包含)</span><br><span class="hljs-comment">string.substring(12, 16) =&gt; &quot;我喜欢你&quot;,  结束下标-开始下标 == 子串长度</span><br><span class="hljs-comment">public String substring(int startpoint) 从当前字符串中取子串,从start开始到结束</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">public String replace(char oldChar,char newChar) 替换字符串中的所有旧字符为新字符</span><br><span class="hljs-comment">public String replaceAll(String old,String new) 全部替换老串为新串, 特殊字符 \ [ * +</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">public String trim() 修剪字符串的首尾的空白字符(Unicode码值小于等于32的字符，都是空白字符)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">public String concat(String str)</span><br><span class="hljs-comment">public String toUpperCase() 改变大小写</span><br><span class="hljs-comment">public String toLowerCase()</span><br><span class="hljs-comment">public String[] split(String regex) 以参数中的子串为切割器, 把字符串切割成多个部分.</span><br><span class="hljs-comment">*****public boolean equalsIgnoreCase(String s2) 比较字符串的内容, 忽略大小写</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringClassTest</span> </span>&#123;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span> </span>&#123;<br>String s=<span class="hljs-string">&quot;  \r\t\n  \r\tw \t\r\t\n\r&quot;</span>;<br><span class="hljs-keyword">int</span> begin=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;s.length();i++) &#123;<br><span class="hljs-keyword">if</span>(s.charAt(i)&gt;<span class="hljs-number">32</span>) &#123;<br>begin=i;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>System.out.println(begin);<br><span class="hljs-keyword">int</span> end=begin;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=s.length()-<span class="hljs-number">1</span>;i&gt;begin;i--) &#123;<br><span class="hljs-keyword">if</span>(s.charAt(i)&gt;<span class="hljs-number">32</span>) &#123;<br>end=i;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>System.out.println(end);<br>System.out.println(s.substring(begin, end+<span class="hljs-number">1</span>));<br><br><br><br>String string=<span class="hljs-string">&quot;PATH=C:\\Python38\\Scripts\\;C:\\Python38\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NGX;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;D:\\Program Files\\Java\\jdk-13.0.2\\bin;C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit);D:\\python;D:\\python\\Scripts;D:\\python\\Library\\bin;D:\\Git\\cmd;C:\\ProgramData\\chocolatey\\bin;D:\\blog\\;C:\\Users\\Hasee\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\Hasee\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;D:\\python\\PyCharm Community Edition 2019.3.3\\bin;D:\\Fiddler;C:\\Users\\Hasee\\AppData\\Roaming\\npm;D:\\PyCharm Community Edition 2020.2.3\\bin;C:\\adb;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;D:\\tomcat\\apache-tomcat-10.0.2\\bin;D:\\Program Files\\Java\\jdk-13.0.2\\bin;C:\\Users\\Hasee\\AppData\\Local\\Microsoft\\WindowsApps;;C:\\Users\\Hasee\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;D:\\python\\PyCharm Community Edition 2019.3.3\\bin;D:\\Fiddler;C:\\Users\\Hasee\\AppData\\Roaming\\npm;D:\\PyCharm Community Edition 2020.2.3\\bin;;C:\\Users\\Hasee\\AppData\\Local\\Microsoft\\WindowsApps&quot;</span>;<br>String[] splitString=string.split(<span class="hljs-string">&quot;;&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;splitString.length;i++) &#123;<br>System.out.println(splitString[i]);<br>&#125;<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br>String s=<span class="hljs-string">&quot;abcdefghijklmn&quot;</span>;<br><span class="hljs-keyword">int</span> begin=<span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span> end=<span class="hljs-number">6</span>;<br>String s1=s.substring(<span class="hljs-number">0</span>,begin);<br>String s2=s.substring(begin, end);<br>String s3=s.substring(end,s.length());<br>System.out.println(s1);<br>System.out.println(s2);<br>System.out.println(s3);<br>String news=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;s2.length();i++) &#123;<br>news=s2.charAt(i)+news;<br>&#125;<br>System.out.println(news);<br>news=s1+news+s3;<br>System.out.println(news);<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">char</span>[] arr= &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;p&#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span>&#125;;<br>String s1=<span class="hljs-keyword">new</span> String(arr);<br>System.out.println(s1);<br>String s2=<span class="hljs-keyword">new</span> String(arr,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//new String(char[],startindex,count)</span><br>System.out.println(s2);<br>System.out.println(s2.length());<br>String s3=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=s1.length()-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--) &#123;<br>s3+=s1.charAt(i);<br>&#125;<br>System.out.println(s3);<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>String s=<span class="hljs-string">&quot;abkkcadkabkebfkabkskab&quot;</span>;<br>String s1=<span class="hljs-string">&quot;ab&quot;</span>;<br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;s.length();) &#123;<br><span class="hljs-keyword">if</span>(s.indexOf(s1,i)!=-<span class="hljs-number">1</span>) &#123;<br>cnt++;<br>i=s.indexOf(s1,i)+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>i++;<br>&#125;<br>&#125;<br>System.out.println(cnt);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="装箱"><a href="#装箱" class="headerlink" title="装箱"></a>装箱</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> wrapper;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WrapperTest</span> </span>&#123;<br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n=<span class="hljs-number">20</span>;<br>Integer obj1=<span class="hljs-keyword">new</span> Integer(n);<br>Integer obj2=n;<span class="hljs-comment">//自动装箱</span><br>System.out.println(obj1==obj2);<br>System.out.println(obj1.equals(obj2));<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>Integer i=<span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>);<br>Integer j=<span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>);<br>System.out.println(i==j);<span class="hljs-comment">//false</span><br><span class="hljs-comment">//自动装箱，调用Integer.valueOf(n)</span><br><span class="hljs-comment">//在-128到127之间，自动装箱不会创建新的对象，会取缓冲对象数组中的一个，超过该范围，自动装箱会创建新对象</span><br>Integer m=<span class="hljs-number">1</span>;<span class="hljs-comment">//自动装箱</span><br>Integer n=<span class="hljs-number">1</span>;<br>System.out.println(m==n);<span class="hljs-comment">// true</span><br><br><br>Integer x=<span class="hljs-number">128</span>;<span class="hljs-comment">//自动装箱</span><br>Integer y=<span class="hljs-number">128</span>;<br>System.out.println(x==y);<span class="hljs-comment">//false</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="JavaIo"><a href="#JavaIo" class="headerlink" title="JavaIo"></a>JavaIo</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedInputStream;<br><span class="hljs-keyword">import</span> java.io.BufferedOutputStream;<br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStreamWriter;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 绝对路径：以根目录为开始的路径</span><br><span class="hljs-comment"> * 相对路径：以当前目录未开始的路径（./）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String school; <span class="hljs-comment">// 序列化不可以序列化静态属性</span><br><br><span class="hljs-comment">// 只序列化对象在GC区中的数据</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> grade;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">double</span> score;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, <span class="hljs-keyword">int</span> grade, <span class="hljs-keyword">double</span> score)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.id = id;<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.grade = grade;<br><span class="hljs-keyword">this</span>.score = score;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.id = id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getGrade</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> grade;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGrade</span><span class="hljs-params">(<span class="hljs-keyword">int</span> grade)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.grade = grade;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getScore</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> score;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setScore</span><span class="hljs-params">(<span class="hljs-keyword">double</span> score)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.score = score;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student [id=&quot;</span> + id + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;, grade=&quot;</span> + grade + <span class="hljs-string">&quot;, score=&quot;</span> + score + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JavaIoTest</span> </span>&#123;<br><span class="hljs-comment">// 从键盘输入一些内容, 把文件保存成UTF8格式的文本文件content.txt</span><br><span class="hljs-comment">// 直到键盘输入over命令, 或ctrl+z </span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test13</span><span class="hljs-params">()</span> </span>&#123;<br>InputStream is = System.in; <span class="hljs-comment">// 以键盘为数据源</span><br>InputStreamReader isr = <span class="hljs-keyword">null</span>;<br>BufferedReader bufferedReader = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>isr = <span class="hljs-keyword">new</span> InputStreamReader(is);<br>bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(isr);<br>String line = bufferedReader.readLine();<br><span class="hljs-keyword">while</span> (line != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-comment">// 1) 处理数据 </span><br><span class="hljs-keyword">if</span> (line.equals(<span class="hljs-string">&quot;exit&quot;</span>)) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>System.out.println(line);<br><span class="hljs-comment">// 2) 继续读</span><br>line = bufferedReader.readLine(); <span class="hljs-comment">// ctrl+z 提醒流数据已经结束</span><br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (bufferedReader != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>bufferedReader.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test12</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>System.err.println(<span class="hljs-string">&quot;Error&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test11</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//FileWriter fileWriter = null;</span><br>FileOutputStream fos = <span class="hljs-keyword">null</span>;<br>OutputStreamWriter osw = <span class="hljs-keyword">null</span>;<br>BufferedWriter bufferedWriter = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//fileWriter = new FileWriter(&quot;一个文本文件&quot;);</span><br>fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;一个文本文件_UTF8&quot;</span>, <span class="hljs-keyword">true</span>); <span class="hljs-comment">// 在创建节点流时, 传入第2个参数true,表示追加</span><br>osw = <span class="hljs-keyword">new</span> OutputStreamWriter(fos, <span class="hljs-string">&quot;utf8&quot;</span>); <span class="hljs-comment">// 在写文件时, 把字符串全部按照UTF8编码方式进行编码</span><br>bufferedWriter = <span class="hljs-keyword">new</span> BufferedWriter(osw);<br>bufferedWriter.write(<span class="hljs-string">&quot;abc我和你&quot;</span>);<br><br><span class="hljs-comment">//bufferedWriter.flush(); // 把数据真的从缓冲区刷入硬盘</span><br><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (bufferedWriter != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>bufferedWriter.close(); <span class="hljs-comment">// 在关闭前会自动flush</span><br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test10</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//FileReader fileReader = null; // 它太弱了, 不好用</span><br>FileInputStream fis = <span class="hljs-keyword">null</span>;<br>InputStreamReader isr = <span class="hljs-keyword">null</span>;<br>BufferedReader bufferedReader = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//fileReader = new FileReader(&quot;HashMap.java&quot;); // 只能处理和项目一致的编码的文本文件</span><br>fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;HashMap.java&quot;</span>);<br><span class="hljs-comment">//isr = new InputStreamReader(fis); // 在这里仍然使用的是默认编码方式</span><br>isr = <span class="hljs-keyword">new</span> InputStreamReader(fis, <span class="hljs-string">&quot;utf8&quot;</span>); <span class="hljs-comment">// 指明转换流在处理字节数据时按照UTF8编码方式处理字符串</span><br>bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(isr);<br><br>String line = bufferedReader.readLine(); <br><span class="hljs-keyword">while</span> (line != <span class="hljs-keyword">null</span>) &#123;<br>System.out.println(line);<br>line = bufferedReader.readLine();<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (bufferedReader != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>bufferedReader.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unserialize</span><span class="hljs-params">()</span> </span>&#123;<br>FileInputStream fis = <span class="hljs-keyword">null</span>;<br>BufferedInputStream bis = <span class="hljs-keyword">null</span>;<br>ObjectInputStream ois = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;对象序列化&quot;</span>);<br>bis = <span class="hljs-keyword">new</span> BufferedInputStream(fis);<br>ois = <span class="hljs-keyword">new</span> ObjectInputStream(bis);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Object obj1 = ois.readObject();</span><br><span class="hljs-comment">Object obj2 = ois.readObject();</span><br><span class="hljs-comment">Object obj3 = ois.readObject();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">System.out.println(obj1);</span><br><span class="hljs-comment">System.out.println(obj2);</span><br><span class="hljs-comment">System.out.println(obj3);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">System.out.println(Student.school);</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Student[] arr = (Student[])ois.readObject();</span><br><span class="hljs-comment">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="hljs-comment">System.out.println(arr[i]);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br>List&lt;Student&gt; list = (List&lt;Student&gt;)ois.readObject();<br>Iterator&lt;Student&gt; iterator = list.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>System.out.println(iterator.next());<br>&#125;<br><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (ois != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>ois.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">serialize</span><span class="hljs-params">()</span> </span>&#123;<br>FileOutputStream fos = <span class="hljs-keyword">null</span>;<br>BufferedOutputStream bos = <span class="hljs-keyword">null</span>;<br>ObjectOutputStream oos = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;对象序列化&quot;</span>);<br>bos = <span class="hljs-keyword">new</span> BufferedOutputStream(fos);<br>oos = <span class="hljs-keyword">new</span> ObjectOutputStream(bos);<br><br>Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-number">90</span>);<br>Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;小花&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">80</span>);<br>Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;小丽&quot;</span>, <span class="hljs-number">4</span>, <span class="hljs-number">20</span>);<br><br>s1.school = <span class="hljs-string">&quot;atguigu&quot;</span>;<br><br><span class="hljs-comment">//oos.writeObject(s1);</span><br><span class="hljs-comment">//oos.writeObject(s2);</span><br><span class="hljs-comment">//oos.writeObject(s3);</span><br><br><span class="hljs-comment">//Student[] arr = &#123;s1, s2, s3&#125;;</span><br><span class="hljs-comment">//oos.writeObject(arr);</span><br><br>List&lt;Student&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Student&gt;();<br>list.add(s1);<br>list.add(s2);<br>list.add(s3);<br>oos.writeObject(list);<br><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (oos != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>oos.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test8</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException </span>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Unicoode编码每个字符占两个字节</span><br><span class="hljs-comment">   GBK编码汉字占两个字节，其他字符一个字节</span><br><span class="hljs-comment">   UTF-8编码汉字占三个字节，其他字符占一个字节</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// e6 88 91 可变长度编码</span><br><span class="hljs-keyword">int</span> n1 = <span class="hljs-number">0x6211</span>; <span class="hljs-comment">// Unicode码是国际标准委员会制定</span><br>System.out.println(n1);<br>System.out.println((<span class="hljs-keyword">char</span>)n1);<br><br><span class="hljs-keyword">int</span> n2 = <span class="hljs-number">0xCED2</span>; <span class="hljs-comment">// GBK码值, 是中国人自己制定</span><br>System.out.println(n2);<br><br><span class="hljs-comment">// 编码 : 字符串 =&gt; 字节数组, string.getBytes(), 目标是把字符串保存到文件中或通过网络传输.</span><br>String string = <span class="hljs-string">&quot;abc我和你&quot;</span>;<br><span class="hljs-keyword">byte</span>[] bytes1 = string.getBytes(<span class="hljs-string">&quot;gbk&quot;</span>); <span class="hljs-comment">// 按照项目默认的编码方式: GBK编码方式进行编码</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; bytes1.length; i++) &#123;<br>System.out.print(Integer.toHexString(bytes1[i]) + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.println();<br><br><span class="hljs-keyword">byte</span>[] bytes2 = string.getBytes(<span class="hljs-string">&quot;utf8&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; bytes2.length; i++) &#123;<br>System.out.print(Integer.toHexString(bytes2[i]) + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.println();<br><br><span class="hljs-comment">// 解码 : 字节数组 =&gt; 字符串, new String(byte[]), 把文件中或从网络接收的数据还原成字符串</span><br>String string2 = <span class="hljs-keyword">new</span> String(bytes1, <span class="hljs-string">&quot;gbk&quot;</span>); <span class="hljs-comment">// 把字节数组按照gbk编码方式进行解码 </span><br><span class="hljs-comment">// 每2个字节凑一个整数, 是GBK码, 再查表找到对应的Unicode码</span><br>System.out.println(string2);<br><br>String string3 = <span class="hljs-keyword">new</span> String(bytes2, <span class="hljs-string">&quot;utf8&quot;</span>);<br><span class="hljs-comment">// 每3个字节凑一个字符, 从3个字节中拆出数据, 拆出的数据直接就是Unicode</span><br>System.out.println(string3);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test9</span><span class="hljs-params">()</span> </span>&#123;<br>FileInputStream fis = <span class="hljs-keyword">null</span>;<br>BufferedInputStream bis = <span class="hljs-keyword">null</span>;<br>ObjectInputStream ois = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;对象输出流文件2&quot;</span>);<br>bis = <span class="hljs-keyword">new</span> BufferedInputStream(fis);<br>ois = <span class="hljs-keyword">new</span> ObjectInputStream(bis);<br><br><span class="hljs-keyword">int</span> readInt = ois.readInt();<br>System.out.println(readInt);<br><span class="hljs-keyword">boolean</span> readBoolean1 = ois.readBoolean();<br><span class="hljs-keyword">boolean</span> readBoolean2 = ois.readBoolean();<br>System.out.println(readBoolean1);<br>System.out.println(readBoolean2);<br><span class="hljs-keyword">long</span> readLong = ois.readLong();<br>System.out.println(readLong);<br><span class="hljs-keyword">double</span> readDouble = ois.readDouble();<br>System.out.println(readDouble);<br>String readUTF = ois.readUTF(); <span class="hljs-comment">// 读文件要解码</span><br>System.out.println(readUTF);<br><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (ois != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>ois.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test7</span><span class="hljs-params">()</span> </span>&#123;<br>FileOutputStream fos = <span class="hljs-keyword">null</span>;<br>BufferedOutputStream bos = <span class="hljs-keyword">null</span>;<br>ObjectOutputStream oos = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;对象输出流文件2&quot;</span>);<br>bos = <span class="hljs-keyword">new</span> BufferedOutputStream(fos);<br>oos = <span class="hljs-keyword">new</span> ObjectOutputStream(bos);<br><br>oos.writeInt(<span class="hljs-number">10</span>); <br>oos.writeBoolean(<span class="hljs-keyword">false</span>);<br>oos.writeBoolean(<span class="hljs-keyword">true</span>);<br>oos.writeLong(<span class="hljs-number">20</span>);<br>oos.writeDouble(<span class="hljs-number">3.14</span>);<br>oos.writeUTF(<span class="hljs-string">&quot;abc我和你xxx&quot;</span>); <span class="hljs-comment">// 写文件要编码</span><br><span class="hljs-comment">//oos.writeChars(&quot;abc我和你xxx&quot;); // 把字符串直接写文件</span><br><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (oos != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>oos.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span> </span>&#123;<br>FileInputStream fis = <span class="hljs-keyword">null</span>;<br>BufferedInputStream bis = <span class="hljs-keyword">null</span>;<br>ObjectInputStream ois = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;对象输出流文件&quot;</span>);<br>bis = <span class="hljs-keyword">new</span> BufferedInputStream(fis);<br>ois = <span class="hljs-keyword">new</span> ObjectInputStream(bis);<br><br><span class="hljs-keyword">int</span> readInt = ois.readInt();<br>System.out.println(readInt);<br><span class="hljs-keyword">boolean</span> readBoolean1 = ois.readBoolean();<br><span class="hljs-keyword">boolean</span> readBoolean2 = ois.readBoolean();<br>System.out.println(readBoolean1);<br>System.out.println(readBoolean2);<br><span class="hljs-keyword">long</span> readLong = ois.readLong();<br>System.out.println(readLong);<br><span class="hljs-keyword">double</span> readDouble = ois.readDouble();<br>System.out.println(readDouble);<br><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (ois != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>ois.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 使用对象流写文件, 写入50个100以内的随机整数</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exer1</span><span class="hljs-params">()</span> </span>&#123;<br>FileOutputStream fos = <span class="hljs-keyword">null</span>;<br>BufferedOutputStream bos = <span class="hljs-keyword">null</span>;<br>ObjectOutputStream oos = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;50个随机数&quot;</span>);<br>bos = <span class="hljs-keyword">new</span> BufferedOutputStream(fos);<br>oos = <span class="hljs-keyword">new</span> ObjectOutputStream(bos);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>oos.writeInt((<span class="hljs-keyword">int</span>)(Math.random() * <span class="hljs-number">100</span>));<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (oos != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>oos.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 使用对象输入流读取这50个随机整数</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exer2</span><span class="hljs-params">()</span> </span>&#123;<br>FileInputStream fis = <span class="hljs-keyword">null</span>;<br>BufferedInputStream bis = <span class="hljs-keyword">null</span>;<br>ObjectInputStream ois = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;50个随机数&quot;</span>);<br>bis = <span class="hljs-keyword">new</span> BufferedInputStream(fis);<br>ois = <span class="hljs-keyword">new</span> ObjectInputStream(bis);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>System.out.println(ois.readInt());<br>&#125;<br><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (ois != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>ois.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// ObjectInputStream和ObjectOutputStream</span><br>FileOutputStream fos = <span class="hljs-keyword">null</span>;<br>BufferedOutputStream bos = <span class="hljs-keyword">null</span>;<br>ObjectOutputStream oos = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;对象输出流文件&quot;</span>);<br>bos = <span class="hljs-keyword">new</span> BufferedOutputStream(fos);<br>oos = <span class="hljs-keyword">new</span> ObjectOutputStream(bos);<br><br>oos.writeInt(<span class="hljs-number">10</span>); <span class="hljs-comment">// 数据在内存中如何 保存 它就如何写入文件</span><br>oos.writeBoolean(<span class="hljs-keyword">false</span>);<br>oos.writeBoolean(<span class="hljs-keyword">true</span>);<br>oos.writeLong(<span class="hljs-number">20</span>);<br>oos.writeDouble(<span class="hljs-number">3.14</span>);<br><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (oos != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>oos.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span> </span>&#123;<br>FileWriter fileWriter = <span class="hljs-keyword">null</span>;<br>BufferedWriter bufferedWriter = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>fileWriter = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;使用缓冲流写文本&quot;</span>);<br>bufferedWriter = <span class="hljs-keyword">new</span> BufferedWriter(fileWriter);<br>String[] content = &#123;<span class="hljs-string">&quot;来上一些字符串内容1&quot;</span>,<br><span class="hljs-string">&quot;来上一些字符串内容2&quot;</span>,<br><span class="hljs-string">&quot;来上一些字符串内容3&quot;</span>,<br><span class="hljs-string">&quot;来上一些字符串内容4&quot;</span>,<br><span class="hljs-string">&quot;来上一些字符串内容5&quot;</span>,<br><span class="hljs-string">&quot;来上一些字符串内容6&quot;</span>,<br><span class="hljs-string">&quot;来上一些字符串内容7&quot;</span>,<br><span class="hljs-string">&quot;来上一些字符串内容8&quot;</span>,<br><span class="hljs-string">&quot;1234567890123456&quot;</span>,<br><span class="hljs-string">&quot;asdfkjasldfjalksdjflaksjdflkasjdflkasjdff&quot;</span>,<br><span class="hljs-string">&quot;xcvadsfasdfasdfasdfasdf&quot;</span>&#125;;<br><span class="hljs-keyword">for</span> (String string : content) &#123;<br>bufferedWriter.write(string);<br>bufferedWriter.newLine(); <span class="hljs-comment">// 最有价值方法</span><br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (bufferedWriter != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>bufferedWriter.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 使用缓冲流(处理流)</span><br>FileReader fileReader = <span class="hljs-keyword">null</span>;<br>BufferedReader bufferedReader = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 包装流, 使用对象关联, 包装流把节点流对象关联为属性.</span><br>fileReader = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;HashMap.java&quot;</span>);<br>bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(fileReader);<br><span class="hljs-comment">// 最有价值方法</span><br>String line = bufferedReader.readLine(); <span class="hljs-comment">// 读到的字符串没有换行</span><br><span class="hljs-keyword">int</span> num = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (line != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-comment">// 处理读到的行</span><br>System.out.println(num++ + <span class="hljs-string">&quot; &quot;</span> + line);<br><span class="hljs-comment">// 继续读后面的行, 直到null</span><br>line = bufferedReader.readLine();<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">// 只需要关闭高级流, 因为低级流被关联, 并且会在关闭高级流时自动关闭</span><br><span class="hljs-keyword">if</span> (bufferedReader != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>bufferedReader.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>FileWriter fileWriter = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>fileWriter = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;写一个文件&quot;</span>);<br><span class="hljs-comment">// 写数组</span><br>String[] content = &#123;<span class="hljs-string">&quot;来上一些字符串内容1&quot;</span>,<br><span class="hljs-string">&quot;来上一些字符串内容2&quot;</span>,<br><span class="hljs-string">&quot;来上一些字符串内容3&quot;</span>,<br><span class="hljs-string">&quot;来上一些字符串内容4&quot;</span>,<br><span class="hljs-string">&quot;来上一些字符串内容5&quot;</span>,<br><span class="hljs-string">&quot;来上一些字符串内容6&quot;</span>,<br><span class="hljs-string">&quot;来上一些字符串内容7&quot;</span>,<br><span class="hljs-string">&quot;来上一些字符串内容8&quot;</span>,<br><span class="hljs-string">&quot;1234567890123456&quot;</span>,<br><span class="hljs-string">&quot;asdfkjasldfjalksdjflaksjdflkasjdflkasjdff&quot;</span>,<br><span class="hljs-string">&quot;xcvadsfasdfasdfasdfasdf&quot;</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; content.length; i++) &#123;<br><span class="hljs-keyword">char</span>[] charArray = content[i].toCharArray();<br><span class="hljs-comment">//fileWriter.write(charArray);// 直接把一个数组的全部内容写入到输出流中</span><br><span class="hljs-comment">//这是超重点方法, 把数组的一部分写入文件</span><br>fileWriter.write(charArray, <span class="hljs-number">1</span>, charArray.length - <span class="hljs-number">1</span>); <span class="hljs-comment">// 第2个参数是offset偏移, 第3个参数是length长度</span><br><br>fileWriter.write(<span class="hljs-number">13</span>); <span class="hljs-comment">// 写回车</span><br>fileWriter.write(<span class="hljs-number">10</span>); <span class="hljs-comment">// 写换行</span><br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (fileWriter != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>fileWriter.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//使用缓冲区读文件, 要求在每一行前面加上行号</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> line = <span class="hljs-number">1</span>;<br>System.out.print(line++ + <span class="hljs-string">&quot; &quot;</span>);<br>FileReader fileReader = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>fileReader = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;HashMap.java&quot;</span>);<br><span class="hljs-keyword">char</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">8192</span>];<br><span class="hljs-keyword">int</span> realCount = fileReader.read(buf);<br><span class="hljs-keyword">while</span> (realCount != -<span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// 1) 处理已经实际读到的数据</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; realCount; i++) &#123;<br>System.out.print(buf[i]);<br><span class="hljs-keyword">if</span> (buf[i] == <span class="hljs-number">10</span>) &#123;<br>System.out.print(line++ + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 2) 继续读后面的数据, 直到-1为止</span><br>realCount = fileReader.read(buf);<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (fileReader != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>fileReader.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><ul><li>文件复制</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> javaio;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileCopy</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>FileInputStream fis=<span class="hljs-keyword">null</span>;<br>FileOutputStream fos=<span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>fis=<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;s&quot;</span>);<br>fos=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;s2&quot;</span>);<br><span class="hljs-keyword">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">8192</span>];<br><span class="hljs-keyword">int</span> realCount=fis.read(buf);<br><span class="hljs-keyword">while</span>(realCount!=-<span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">//处理数据</span><br>fos.write(buf, <span class="hljs-number">0</span>, realCount);<br><span class="hljs-comment">//继续读</span><br>realCount=fis.read(buf);<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span>(fis!=<span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>fis.close();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(fos!=<span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>fos.close();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> com.mysql.jdbc.Statement;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.Driver;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1) 在project项目下创建目录</span><br><span class="hljs-comment"> * 2) 把相关的.jar文件复制到这个目录中</span><br><span class="hljs-comment"> * 3) 再把jar文件导入到build-path中</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * url : uniform resource locator </span><br><span class="hljs-comment"> * 统一资源定位器 jdbc:mysql://127.0.0.1:3306/test</span><br><span class="hljs-comment"> * jdbc是主协议</span><br><span class="hljs-comment"> * mysql是子协议 </span><br><span class="hljs-comment"> * 127.0.0.1是Mysql服务器主机地址</span><br><span class="hljs-comment"> * 3306是mysql服务器的端口</span><br><span class="hljs-comment"> * test是数据库名</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcTest</span> </span>&#123;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span> </span>&#123;<br>Connection connection=<span class="hljs-keyword">null</span>;<br>Statement statement=<span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br> connection = JdbcUtil.getConnection();<br> statement=(Statement) connection.createStatement();<span class="hljs-comment">//通过连接获取执行体对象</span><br> System.out.println(statement);<br> String sql=<span class="hljs-string">&quot;create table if not exists customer(id int auto_increment,&quot;</span><br> +<span class="hljs-string">&quot;name varchar(10),&quot;</span><br> +<span class="hljs-string">&quot;gender char(1) default &#x27;男&#x27;,&quot;</span><br> +<span class="hljs-string">&quot;age int,&quot;</span><br> +<span class="hljs-string">&quot;phone char(11),&quot;</span><br> + <span class="hljs-string">&quot;primary key(id),&quot;</span><br> + <span class="hljs-string">&quot;unique(phone))&quot;</span>;<br> <span class="hljs-keyword">int</span> rows=statement.executeUpdate(sql);<span class="hljs-comment">//可以执行update,delete,insert,DDL，除了select的DML操作等sql操作</span><br> System.out.println(rows);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br>JdbcUtil.close(connection,statement);<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException, ClassNotFoundException, IOException </span>&#123;<br>InputStream inputStream = <span class="hljs-keyword">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;jdbc.properties&quot;</span>);<br>Properties properties = <span class="hljs-keyword">new</span> Properties();<br>properties.load(inputStream);<br>inputStream.close();<br>String driverClassName = properties.getProperty(<span class="hljs-string">&quot;driverClassName&quot;</span>);<br>String url = properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>String user = properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>String password = properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>System.out.println(driverClassName);<br>Class.forName(driverClassName); <span class="hljs-comment">// 在类的静态语句块中完成自我注册</span><br>Connection connection = DriverManager.getConnection(url, user, password);<br>System.out.println(connection);<br>connection.close();<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException, ClassNotFoundException </span>&#123;<br>Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>); <span class="hljs-comment">// 在类的静态语句块中完成自我注册</span><br>String url = <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/jdbc&quot;</span>;<br>String user = <span class="hljs-string">&quot;root&quot;</span>;<br>String password = <span class="hljs-string">&quot;123456&quot;</span>;<br>Connection connection = DriverManager.getConnection(url, user, password);<br>System.out.println(connection);<br>connection.close();<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException </span>&#123;<br>Class clazz = Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>); <span class="hljs-comment">// 在类的静态语句块中完成自我注册</span><br><span class="hljs-comment">// Driver driver = new com.mysql.jdbc.Driver();</span><br>Driver driver = (Driver) clazz.newInstance();<br>DriverManager.registerDriver(driver);<br><span class="hljs-comment">// 通过驱动程序管理器来间接获取连接</span><br>String url = <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/jdbc&quot;</span>;<br>String user = <span class="hljs-string">&quot;root&quot;</span>;<br>String password = <span class="hljs-string">&quot;123456&quot;</span>;<br>Connection connection = DriverManager.getConnection(url, user, password);<br>System.out.println(connection);<br>connection.close();<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>Driver driver = <span class="hljs-keyword">new</span> com.mysql.jdbc.Driver();<br>DriverManager.registerDriver(driver);<br><span class="hljs-comment">// 通过驱动程序管理器来间接获取连接</span><br>String url = <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/jdbc&quot;</span>;<br>String user = <span class="hljs-string">&quot;root&quot;</span>;<br>String password = <span class="hljs-string">&quot;123456&quot;</span>;<br>Connection connection = DriverManager.getConnection(url, user, password);<br>System.out.println(connection);<br>connection.close();<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>Driver driver = <span class="hljs-keyword">new</span> com.mysql.jdbc.Driver(); <span class="hljs-comment">// 创建子类对象, 当成接口类型的对象来使用</span><br>String url = <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/jdbc&quot;</span>; <span class="hljs-comment">// 统一资源定位器</span><br>Properties info = <span class="hljs-keyword">new</span> Properties();<br>info.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>); <span class="hljs-comment">// 用户名</span><br>info.setProperty(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>); <span class="hljs-comment">// 密码</span><br>Connection connection = driver.connect(url, info); <span class="hljs-comment">// 直接通过驱动程序来连接</span><br>System.out.println(connection);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数据修改"><a href="#数据修改" class="headerlink" title="数据修改"></a>数据修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jdbc;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.ResultSetMetaData;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonUtil</span> </span>&#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过查询操作</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt; 表示要处理的表中的数据对应的对象类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> connection 连接对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> clazz 类模板对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sql 查询</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args 代替sql中的?的实参列表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 一个保存了所有对象的集合</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">List&lt;T&gt; <span class="hljs-title">getList</span><span class="hljs-params">(Connection connection, Class&lt;T&gt; clazz, String sql, Object... args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>List&lt;T&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>PreparedStatement preparedStatement = <span class="hljs-keyword">null</span>;<br>ResultSet resultSet = <span class="hljs-keyword">null</span>; <br><span class="hljs-keyword">try</span> &#123;<br>preparedStatement = connection.prepareStatement(sql);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123; <span class="hljs-comment">// 替换SQL中的?</span><br>preparedStatement.setObject(i + <span class="hljs-number">1</span>, args[i]);<br>&#125;<br>resultSet = preparedStatement.executeQuery(); <br>ResultSetMetaData metaData = resultSet.getMetaData(); <span class="hljs-comment">// 获取元数据</span><br><span class="hljs-keyword">int</span> cols = metaData.getColumnCount(); <span class="hljs-comment">// 获取列数</span><br><span class="hljs-keyword">while</span> (resultSet.next()) &#123; <br>T instance = clazz.newInstance(); <span class="hljs-comment">// 反射的方式, 通过类模板创建实体对象</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cols; i++) &#123;<br>String label = metaData.getColumnLabel(i + <span class="hljs-number">1</span>); <span class="hljs-comment">// label是列标签 , 同时又是属性名</span><br>Object value = resultSet.getObject(label); <span class="hljs-comment">// 从结果集中获取列标签对应的值, 也同时就是目标对象的属性值.</span><br>Field field = clazz.getDeclaredField(label); <span class="hljs-comment">// 反射的方式, 根据属性名获取属性定义对象</span><br>field.setAccessible(<span class="hljs-keyword">true</span>); <span class="hljs-comment">// 暴力反射</span><br>field.set(instance, value); <span class="hljs-comment">// 通过反射的方式为目标对象的属性赋值.</span><br>&#125;<br>list.add(instance);<br>&#125;<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>JdbcUtil.close(<span class="hljs-keyword">null</span>, preparedStatement, resultSet);<br>&#125;<br><span class="hljs-keyword">return</span> list;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">List&lt;T&gt; <span class="hljs-title">getList</span><span class="hljs-params">(Class&lt;T&gt; clazz, String sql, Object... args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>Connection connection = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>connection = JdbcUtil.getConnection();<br><span class="hljs-keyword">return</span> getList(connection,  clazz, sql, args);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>JdbcUtil.close(connection);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通用更新操作</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sql 需要执行的SQL语句, 可以执行除了select外的DML和所有DDL</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args 用于代替SQL中的?的实参列表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 影响行数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(Connection connection, String sql, Object... args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IOException, SQLException </span>&#123;<br>PreparedStatement preparedStatement = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>preparedStatement = connection.prepareStatement(sql); <span class="hljs-comment">// 根据传入 的SQL预编译</span><br><span class="hljs-comment">// 循环处理?</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>preparedStatement.setObject(i + <span class="hljs-number">1</span>, args[i]);<br>&#125;<br><span class="hljs-keyword">int</span> rows = preparedStatement.executeUpdate(); <span class="hljs-comment">// 真正的执行</span><br><span class="hljs-keyword">return</span> rows;<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>JdbcUtil.close(<span class="hljs-keyword">null</span>, preparedStatement); <span class="hljs-comment">// 无论有没有发生异常,都要释放资源</span><br>&#125;<br>&#125; <br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通用更新操作</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sql 需要执行的SQL语句, 可以执行除了select外的DML和所有DDL</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args 用于代替SQL中的?的实参列表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 影响行数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(String sql, Object... args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IOException, SQLException </span>&#123;<br>Connection connection = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>connection = JdbcUtil.getConnection(); <span class="hljs-comment">// 获取连接</span><br><span class="hljs-keyword">return</span> update(connection, sql, args);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>JdbcUtil.close(connection); <span class="hljs-comment">// 无论有没有发生异常,都要释放资源</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>异常</tag>
      
      <tag>Java关键字</tag>
      
      <tag>排序算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mapreduce介绍</title>
    <link href="/2020/11/23/MapReduce/"/>
    <url>/2020/11/23/MapReduce/</url>
    
    <content type="html"><![CDATA[<p>#MapReduce介绍</p><blockquote><p><em><strong>1.mapreduce编程思想</strong></em></p><blockquote><ul><li>适用于数据密集型的应用</li><li>mapreduce 采用分而治之的策略<blockquote><ul><li>把非常庞大的数据集，切分成非常多独立的小分片</li><li>然后为每一个分片单独地启动一个map任务</li><li>最终通过多个map任务，并行地在多个机器上去处理</li></ul></blockquote></li><li>mapreduce计算向数据靠拢的理念<blockquote><ul><li>计算向数据靠拢而不是数据向计算靠拢</li></ul></blockquote></li><li>Master/Slave架构 <blockquote><ul><li>一个Master服务器–》作业跟踪器JobTracker–》负责整个作业的调度和处理以及失败和恢复</li><li>若干个Slave服务器–》负责具体任务执行的组件TaskTracker–》负责接收JobTracker给它发的作业处理指令，完成具体的任务处理</li></ul></blockquote></li><li>map 函数的作用：将输入的一个键值对进行处理生成一批的键值对</li><li>reduce函数的作用： 输入：&lt;key,list(value)&gt;,就是一个键以及一堆值的列表。输出：&lt;key,value&gt;</li></ul></blockquote></blockquote><blockquote><p><em><strong>2.mapreduce体系结构</strong></em></p><blockquote><ul><li>Client客户端<blockquote><ul><li>通过Client可以提交用户编写的应用程序用户通过它将应用程序交到JobTracker端</li><li>通过这些Client用户也可以通过它提供的一些接口去查看当前提交作业的运行状态</li></ul></blockquote></li></ul></blockquote><blockquote><ul><li>JobTracker（作业跟踪器）<blockquote><ul><li>负责资源的监控和作业的调度</li><li>监控底层的其他TaskTracker以及当前运行的Job的健康状况</li><li>一旦探测到失败的情况就把这个任务转移到其它节点继续执行跟踪任务执行进度和资源使用量</li></ul></blockquote></li></ul></blockquote></blockquote><blockquote><blockquote><ul><li>TaskTracker（任务调度器）<blockquote><ul><li>执行具体的相关任务一般接收JobTracker发送过来的命令</li><li>把一些自己的资源使用情况，以及任务的运行进度通过心跳的方式，也就是heartbeat发送给JobTracker（通过slot查看目前的资源使用情况。slot是一种资源调度单位，包括内存,CPU的资源）</li></ul></blockquote></li></ul></blockquote></blockquote><blockquote><blockquote><ul><li>Task<blockquote><ul><li>map任务</li><li>reduce任务 </li></ul></blockquote></li><li><strong>3.mapreduce工程流程</strong>*</li><li>输入(分片操作)</li><li>Map任务（每个分片启动一个map任务）</li><li>Reduce任务</li><li>输出<br>shuffle 将map任务产生的中间结果（一系列的&lt;key,value&gt;）转换为 &lt;key,value-list&gt;<br>最优的Reduce任务个数取决于集群中可用的reduce任务槽（slot）的数目(一般比该数目稍小，这样可以预留一些系统资源处理可能发生的错误)</li></ul></blockquote></blockquote><blockquote><p><em><strong>4.shuffle过程解析</strong></em></p><blockquote><ul><li>Map端的Shuffle过程<blockquote><p>步骤：</p><ol><li>输入数据和执行Map任务</li><li>写入缓存</li><li>溢写（分区，排序，合并（要自己定义才执行））</li><li>文件归并</li></ol></blockquote></li><li>Reduce端的Shuffle过程 <blockquote><p>步骤：</p><ol><li>取数据</li><li>归并数据</li><li>把数据输入给Reduce任务</li></ol></blockquote></li></ul></blockquote><p><strong>MapReduce应用程序的执行过程：</strong><br>程序部署-》分配Map任务，分配Reduce任务-》读数据-》本地写数据-》远程读数据-》写数据<br><em><strong>5. mapreduce具体应用</strong></em> </p><blockquote><ul><li>关系代数运算 </li><li>分组聚合运算</li><li>矩阵乘法</li><li>矩阵运算</li><li>关系的自然连接</li></ul></blockquote></blockquote><blockquote><p><em><strong>6.mapreduce编程实践</strong></em></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hbase简介</title>
    <link href="/2020/11/17/HBase%20introduction/"/>
    <url>/2020/11/17/HBase%20introduction/</url>
    
    <content type="html"><![CDATA[<p>#分布式数据库HBase简介</p><ol><li><p>概述    </p><ul><li>HBase是针对谷歌BigTable的开源实现，是一个高可靠，高性能，面向列，可伸缩的分布式数据库           </li><li>可以用来存储非结构化和半结构化的松散数据</li></ul></li><li><p>数据模型</p><ul><li>索引通过四个元素来定位：行键，列族，列限定符，时间戳</li><li> 面向列的存储</li></ul></li><li><p>实现原理 </p><ul><li>HBase的功能组件<blockquote><p>库函数<br>Master服务器<br>Region服务器    </p></blockquote></li><li>两个核心概念表和Region<blockquote><p>一个HBase表被划分成多个Region<br>一个Region会分裂成多个新的Region</p></blockquote></li><li>怎么实现Region定位<blockquote><p>三层结构索引实现Region的定位<br>Zookeeper文件<br>-ROOT-表<br>.MEAT.表      </p></blockquote></li></ul></li><li><p>运行机制</p><ul><li>HBase的系统架构<blockquote><p><img src="https://img-blog.csdnimg.cn/2020070104123335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTE1NDU1OQ==,size_16,color_FFFFFF,t_70#pic_center" title="系统架构图"><br>Zookeeper服务器（被大量用于分布式系统，提供配置维护，域名服务，分布式同步服务）实现协同管理服务，提供管家功能（维护和管理整个HBase集群）<br>Master服务器作用：1.对表增删改查。2.负责不同Region服务器的负载均衡。3.负责调整分裂合并后Region的分布。4.负责重新分配故障，失效的Region服务器</p></blockquote></li><li>Region服务器（负责用户数据的存储和管理）的工作原理</li><li>Store的工作原理</li><li>HLog的工作原理</li></ul></li><li><p>编程实践<br>HBase安装及实践，参考厦门大学数据库实验室博客<br><a href="http://dblab.xmu.edu.cn/blog/2442-2/">参考链接</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop的介绍</title>
    <link href="/2020/11/11/hadoop%20installation/"/>
    <url>/2020/11/11/hadoop%20installation/</url>
    
    <content type="html"><![CDATA[<h1 id="Hadoop的介绍"><a href="#Hadoop的介绍" class="headerlink" title="Hadoop的介绍"></a>Hadoop的介绍</h1><p>1.hadoop两大核心组件    </p><blockquote><ul><li>HDFS(Hadoop Distributed File System )     <blockquote><ul><li>NameNode(管理各种元数据并提供服务) ,DataNode  </li><li> 冷备份SecondaryNameNode(HDFS1.0)</li></ul></blockquote></li><li>MapReduce    <blockquote><ul><li>JobTracker TaskTracker    </li></ul></blockquote></li></ul></blockquote><p>2.Hadoop集群基准测试</p><blockquote><ul><li>Hadoop自带的一些基准测试程序，被打包在测试程序JAR文件中</li><li>用TestDFSIO基准测试，来测试HDFS的IO性能</li><li>用排序测试MapReduce</li></ul></blockquote><p>3.HDFS系统介绍<br>基本介绍：HDFS开源实现了GFS的基本思想<br>优良特性：</p><blockquote><ul><li>兼容廉价的硬件设备</li><li>流数据读写</li><li>大数据集</li><li>简单的文件模型</li><li>强大的跨平台兼容性   </li></ul></blockquote><p>局限性：</p><blockquote><ul><li>不适合低延迟数据访问</li><li>无法高效存储大量小文件</li><li>不支持多用户写入及任意修改文件 </li></ul></blockquote><p>相关概念：</p><blockquote><ul><li>块（64MB）</li><li>名称节点（NameNode）整个HDFS集群的管家<blockquote><ul><li>FsImage</li><li>EditLog</li></ul></blockquote></li><li>第二名称节点</li><li>数据节点    </li></ul></blockquote><p>HDFS存储原理：</p><blockquote><ul><li>冗余数据保存的问题</li><li>数据保存策略问题</li><li>数据恢复的问题<br>HDFS数据读写：</li><li>读写过程：<br><img src="https://img-blog.csdn.net/20160520174354336?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="数据读写过程" title="过程"></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown语法介绍</title>
    <link href="/2020/10/27/markdown-introduction/"/>
    <url>/2020/10/27/markdown-introduction/</url>
    
    <content type="html"><![CDATA[<h1 id="markdow语法的简单介绍"><a href="#markdow语法的简单介绍" class="headerlink" title="markdow语法的简单介绍"></a>markdow语法的简单介绍</h1><blockquote><ul><li>第一项：markdown标题  <blockquote><ul><li>用“#”号的个数来表示标题的级数</li></ul><ul><li>使用 = 和 - 标记一级和二级标题</li></ul></blockquote></li></ul><ul><li>第二项：段落格式<blockquote><ul><li>Markdown 段落没有特殊的格式<br>直接编写文字，<strong>段落的换行是使用两个以上空格加回车,也可以在段落后面使用一个空行来表示重新开始一个段落</strong>  </li></ul><ul><li><em><strong>字体：</strong></em><br>markdown可以使用斜体文本（一个<em>或_在文字的两边），粗体文本（两个</em>或_在文字的两边），粗斜体文本（三个）    </li></ul></blockquote></li><li>斜体文本*<br><em>斜体文本</em>    </li><li><em>粗体文本</em>*<br><strong>粗体文本</strong>    </li><li><strong>粗斜体文本</strong>*<br><em><strong>粗斜体文本</strong></em>    <blockquote><ul><li><em><strong>分隔线：</strong></em><br>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。    </li></ul></blockquote></li></ul></blockquote><hr><hr><hr><blockquote><blockquote><ul><li><em><strong>删除线：</strong></em><br>删除线： 如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可<br><del>删除线</del></li><li><strong>下划线：</strong><br>下划线可以通过 HTML 的 <u> 标签来实现</u><br><u>下划线</u></li><li><strong>脚注：</strong><br>脚注是对文本的补充说明。<br>创建脚注格式类似这样 [^RUNOOB]。<br>[^RUNOOB]: 菜鸟教程 – 学的不仅是技术，更是梦想！！！</li></ul></blockquote><ul><li>第三项：列表<br>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容     <blockquote><ul><li><strong>嵌套列表：</strong><br>列表嵌套只需在子列表中的选项前面添加四个空格即可    </li></ul></blockquote></li><li>第四项：<strong>区块</strong><br>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号<br>另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推<br>区块中可以使用列表，列表中也可以使用区块</li><li>第五项：<strong>markdown代码</strong><br><code>printf()</code>函数<br>如果是段落上的一个函数或片段的代码可以用反引号把它包起来(`)    <blockquote><ul><li>代码区块：<br>四个空格或者制表符（代码区块使用 4 个空格或者一个制表符（Tab 键）。）<br><img src="https://www.runoob.com/wp-content/uploads/2019/03/6DC89E5C-B41A-4938-97D8-D7D06B879F91.jpg" alt="展示" title="结果展示"><br>你也可以用 ``` 包裹一段代码，并指定一种语言（也可以不指定）    </li></ul></blockquote></li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">include &lt;bits/stdc++.h&gt;    <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;hello world&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    <br>&#125;    <br></code></pre></td></tr></table></figure><blockquote><ul><li><strong>第六项：Markdown 链接:</strong><br>参考<a href="https://www.runoob.com/markdown/md-tutorial.html">菜鸟教程</a></li><li><strong>第七项：markdown 表格</strong><br>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。  </li></ul></blockquote><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr><tr><td>我们可以设置表格的对齐方式：</td><td></td></tr></tbody></table><pre><code>-: 设置内容和标题栏居右对齐。:- 设置内容和标题栏居左对齐。:-: 设置内容和标题栏居中对齐。</code></pre><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><blockquote><ul><li><strong>第八项：markdown高级技巧</strong><br>参考连接<a href="https://www.runoob.com/markdown/md-advance.html">菜鸟教程</a></li></ul></blockquote><hr><hr><p>本文参考菜鸟教程的markdown教学，超链接上文已给出。（<a href="https://www.runoob.com/markdown/md-tutorial.html%EF%BC%89">https://www.runoob.com/markdown/md-tutorial.html）</a></p>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop简介</title>
    <link href="/2020/10/21/hadoop-introduction/"/>
    <url>/2020/10/21/hadoop-introduction/</url>
    
    <content type="html"><![CDATA[<h1 id="hadoop简介"><a href="#hadoop简介" class="headerlink" title="hadoop简介"></a>hadoop简介</h1><p>1.定义：<br>hadoop是一个开源分布式计算平台，为用户提供了底层细节透明的分布式基础框架。<br>2.特性：    </p><ul><li>高可靠性    </li><li>高效性</li><li>高可扩展性</li><li>高容错性</li><li>成本低</li><li>运行在linux中</li><li>支持多种编程语言</li></ul><p>3.版本</p><ul><li>1.0</li><li>2.0</li></ul><p>4.hadoop结构</p><ul><li><img src="https://img-blog.csdnimg.cn/20191024090622860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZtMzQ1Njg5,size_16,color_FFFFFF,t_70" alt="图片展示" title="Hadoop项目结构图"></li><li>参考别人博客的<a href="https://blog.csdn.net/fm345689/article/details/102715230">文字记录</a></li></ul><p>5.Hadoop项目核心模块</p><ul><li>Hadoop Common：为Hadoop其他模块提供支持实用程序。</li><li>HDFS：提供对应用程序数据的高吞吐量访问</li><li>Hadoop YARN：作业调度和集群资源管理的框架</li><li>MapReduce：YARN系统的大型数据集并行处理技术</li></ul><p>6.Hadoop RPC工作原理</p><p>7.MapReduce工作原理</p><blockquote><ul><li>策略：分而治之</li><li>计算向数据靠拢而不是数据向计算靠拢</li></ul></blockquote><p>8.HDFS工作原理</p><p>9.YARN工作原理</p>]]></content>
    
    
    <categories>
      
      <category>hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/09/22/hello-world/"/>
    <url>/2020/09/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
