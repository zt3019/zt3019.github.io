<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java杂记</title>
    <url>/2021/04/14/Java%E6%9D%82%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Java杂记"><a href="#Java杂记" class="headerlink" title="Java杂记"></a>Java杂记</h1><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul>
<li>###异常定义</li>
<li>程序在运行时有可能出现的非正常状况，会导致程序崩溃 </li>
<li>###分类：</li>
<li><h4 id="按程度分："><a href="#按程度分：" class="headerlink" title="按程度分："></a>按程度分：</h4></li>
<li>Error：虚拟机都无法处理的错误状况</li>
<li>Exception：一般性的问题     </li>
<li><h4 id="按照处理方式为分："><a href="#按照处理方式为分：" class="headerlink" title="按照处理方式为分："></a>按照处理方式为分：</h4></li>
<li>受检异常，在程序中必须对其进行处理的异常，如果不处理，编译出错</li>
<li>Exception及其子类，RuntimeException及其子类除外：问题程序不容忽视         </li>
<li>非受检异常 在程序中不是必须对其进行处理的异常</li>
<li>Error及其子类：太严重了 </li>
<li>RuntimeException及其子类：太轻微了</li>
<li><h3 id="异常处理："><a href="#异常处理：" class="headerlink" title="异常处理："></a>异常处理：</h3></li>
<li><h3 id="1）捕获-try-catch-try-可能抛出异常的语句-catch-可能的异常类型-引用-通过异常处理异常对象"><a href="#1）捕获-try-catch-try-可能抛出异常的语句-catch-可能的异常类型-引用-通过异常处理异常对象" class="headerlink" title="1）捕获 try catch try{ 可能抛出异常的语句 }catch(可能的异常类型 引用){ 通过异常处理异常对象 }"></a>1）捕获 try catch try{ 可能抛出异常的语句 }catch(可能的异常类型 引用){ 通过异常处理异常对象 }</h3></li>
<li><h3 id="2）异常抛出-在方法中使用throw异常对象，方法一旦执行了throw和执行return效果是一样的，都会导致方法结束"><a href="#2）异常抛出-在方法中使用throw异常对象，方法一旦执行了throw和执行return效果是一样的，都会导致方法结束" class="headerlink" title="2）异常抛出 在方法中使用throw异常对象，方法一旦执行了throw和执行return效果是一样的，都会导致方法结束"></a>2）异常抛出 在方法中使用throw异常对象，方法一旦执行了throw和执行return效果是一样的，都会导致方法结束</h3></li>
<li>return时正常结束返回，throw时异常结束返回 </li>
<li>在签名中使用throws，可能的异常类型列表，警告调用者，调用此方法有风险，请考虑清楚</li>
<li>方法中的throw作用是真的产生破环</li>
<li><h3 id="3）先捕获再抛出"><a href="#3）先捕获再抛出" class="headerlink" title="3）先捕获再抛出"></a>3）先捕获再抛出</h3></li>
<li>在方法中先尝试执行某代码，如果真的出现了异常，再把这个异常关联到自定义异常对象中，再抛出自定义异常对象       </li>
<li>异常处理的选择：</li>
<li>入口方法尽量捕获（这个方法出问题会不会影响栈）</li>
<li>普通方法尽量抛出</li>
<li>如果代码中有潜在风险，尽量先捕再抛</li>
<li>如果代码中没有风险，但是有时不满足方法继续的条件时，直接抛出<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2></li>
<li>volatile :提醒子线程，此主存中的属性不要制作副本…</li>
</ul>
<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="冒泡排序："><a href="#冒泡排序：" class="headerlink" title="* 冒泡排序："></a>* 冒泡排序：</h3> <figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++) &#123;<br>	arr[i]=(<span class="hljs-keyword">int</span>)(Math.random()*<span class="hljs-number">20</span>);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> tmp:arr) &#123;<br>System.out.print(tmp+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.println();<br><span class="hljs-comment">//冒泡排序</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length-<span class="hljs-number">1</span>;i++) &#123;<span class="hljs-comment">//控制趟数</span><br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;arr.length-<span class="hljs-number">1</span>-i;j++) &#123;<span class="hljs-comment">//控制每一趟的交换次数，应该随着外循环的增加而减少</span><br>		<span class="hljs-keyword">if</span>(arr[j]&gt;arr[j+<span class="hljs-number">1</span>]) &#123;<span class="hljs-comment">//比较相邻元素，满足条件，则交换.</span><br>			<span class="hljs-keyword">int</span> tmp=arr[j];<br>			arr[j]=arr[j+<span class="hljs-number">1</span>];<br>			arr[j+<span class="hljs-number">1</span>]=tmp;<br>		&#125;<br>	&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> tmp:arr) &#123;<br>System.out.print(tmp+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.println();<br></code></pre></td></tr></table></figure>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="* 选择排序"></a>* 选择排序</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> arr1=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span><span class="hljs-literal">[<span class="hljs-number">10</span>]</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;arr1.length;i++) &#123;<br>	arr1<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>=(<span class="hljs-built_in">int</span>)(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>random<span class="hljs-literal">()</span>*<span class="hljs-number">20</span>);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> tmp:arr1) &#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.print(tmp+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println<span class="hljs-literal">()</span>;<br><span class="hljs-comment">//选择排序</span><br><span class="hljs-built_in">int</span> minindex;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;arr1.length-<span class="hljs-number">1</span>;i++) &#123;<span class="hljs-comment">//从0开始到倒数第二个位置</span><br>	minindex=i;<span class="hljs-comment">//最小下标先默认等于i</span><br>	<span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=i+<span class="hljs-number">1</span>;j&lt;arr1.length;j++) &#123;<span class="hljs-comment">//遍历从i+1开始到数组长度的所有数</span><br>		<span class="hljs-keyword">if</span>(arr1<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>&lt;arr1<span class="hljs-literal">[<span class="hljs-identifier">minindex</span>]</span>) &#123;<span class="hljs-comment">//找最小值</span><br>			minindex=j;<span class="hljs-comment">//更新最小下标</span><br>		&#125;<br>	&#125;<br>	<span class="hljs-comment">//交换元素，实现最小值赋值到基准位置i</span><br>	<span class="hljs-built_in">int</span> tmp=arr1<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;<br>	arr1<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>=arr1<span class="hljs-literal">[<span class="hljs-identifier">minindex</span>]</span>;<br>	arr1<span class="hljs-literal">[<span class="hljs-identifier">minindex</span>]</span>=tmp;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> tmp:arr1) &#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.print(tmp+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println<span class="hljs-literal">()</span>;<br></code></pre></td></tr></table></figure>

<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="* 快速排序"></a>* 快速排序</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuickSort</span> &#123;</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quick</span><span class="hljs-params">(<span class="hljs-keyword">int</span> []arr,<span class="hljs-keyword">int</span> <span class="hljs-built_in">begin</span>,<span class="hljs-keyword">int</span> <span class="hljs-built_in">end</span>)</span> </span>&#123;<span class="hljs-comment">//结束索引不包含</span><br>		<span class="hljs-keyword">if</span>(<span class="hljs-built_in">end</span>-<span class="hljs-built_in">begin</span>&lt;=<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//递归结束条件</span><br>			<span class="hljs-keyword">return</span>;<br>		&#125;<br>		<span class="hljs-comment">//分区，分三个部分，中间是键，左边比键小，右边比键大</span><br>		<span class="hljs-comment">//定位索引最关键</span><br>		<span class="hljs-keyword">int</span> key=arr[<span class="hljs-built_in">begin</span>];<span class="hljs-comment">//总是取第一个元素为键值</span><br>		<span class="hljs-keyword">int</span> keyIndex=<span class="hljs-built_in">begin</span>;<span class="hljs-comment">// 键索引值，用于动态保存比键值小的值 </span><br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-built_in">begin</span>+<span class="hljs-number">1</span>;i&lt;<span class="hljs-built_in">end</span>;i++) &#123;<br>			<span class="hljs-keyword">if</span>(arr[i]&lt;key) &#123;<br>				keyIndex++;<span class="hljs-comment">//只要找到比key小的数据，keyIndex就往右移</span><br>				<span class="hljs-comment">//交换keyIndex和i位置的值</span><br>				<span class="hljs-keyword">int</span> tmp=arr[keyIndex];<br>				arr[keyIndex]=arr[i];<span class="hljs-comment">//保证比键小的值在键的右面依次保存</span><br>				arr[i]=tmp;<br>			&#125;<br>		&#125;<br>		<span class="hljs-comment">//让键值归为到keyIndex位置处</span><br>		arr[<span class="hljs-built_in">begin</span>]=arr[keyIndex];<br>		arr[keyIndex]=key;<br>		<span class="hljs-comment">//左子列递归</span><br>		quick(arr,<span class="hljs-built_in">begin</span>,keyIndex<span class="hljs-number">-1</span>);<br>		<span class="hljs-comment">//右子列递归</span><br>		 quick(arr,keyIndex+<span class="hljs-number">1</span>,<span class="hljs-built_in">end</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>		<span class="hljs-keyword">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++) &#123;<br>			arr[i]=(<span class="hljs-keyword">int</span>)(Math.<span class="hljs-built_in">random</span>()*<span class="hljs-number">20</span>);<br>		&#125;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> tmp:arr) &#123;<br>		System.out.<span class="hljs-built_in">print</span>(tmp+<span class="hljs-string">&quot; &quot;</span>);<br>		&#125;<br>		System.out.<span class="hljs-built_in">println</span>();<br>		quick(arr,<span class="hljs-number">0</span>,arr.length);<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> tmp:arr) &#123;<br>		System.out.<span class="hljs-built_in">print</span>(tmp+<span class="hljs-string">&quot; &quot;</span>);<br>		&#125;<br>		System.out.<span class="hljs-built_in">println</span>();<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>异常</tag>
        <tag>Java关键字</tag>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop的介绍</title>
    <url>/2020/11/11/hadoop%20installation/</url>
    <content><![CDATA[<h1 id="Hadoop的介绍"><a href="#Hadoop的介绍" class="headerlink" title="Hadoop的介绍"></a>Hadoop的介绍</h1><p>1.hadoop两大核心组件    </p>
<blockquote>
<ul>
<li>HDFS(Hadoop Distributed File System )     <blockquote>
<ul>
<li>NameNode(管理各种元数据并提供服务) ,DataNode  </li>
<li> 冷备份SecondaryNameNode(HDFS1.0)</li>
</ul>
</blockquote>
</li>
<li>MapReduce    <blockquote>
<ul>
<li>JobTracker TaskTracker    </li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
<p>2.Hadoop集群基准测试</p>
<blockquote>
<ul>
<li>Hadoop自带的一些基准测试程序，被打包在测试程序JAR文件中</li>
<li>用TestDFSIO基准测试，来测试HDFS的IO性能</li>
<li>用排序测试MapReduce</li>
</ul>
</blockquote>
<p>3.HDFS系统介绍<br>基本介绍：HDFS开源实现了GFS的基本思想<br>优良特性：</p>
<blockquote>
<ul>
<li>兼容廉价的硬件设备</li>
<li>流数据读写</li>
<li>大数据集</li>
<li>简单的文件模型</li>
<li>强大的跨平台兼容性   </li>
</ul>
</blockquote>
<p>局限性：</p>
<blockquote>
<ul>
<li>不适合低延迟数据访问</li>
<li>无法高效存储大量小文件</li>
<li>不支持多用户写入及任意修改文件 </li>
</ul>
</blockquote>
<p>相关概念：</p>
<blockquote>
<ul>
<li>块（64MB）</li>
<li>名称节点（NameNode）整个HDFS集群的管家<blockquote>
<ul>
<li>FsImage</li>
<li>EditLog</li>
</ul>
</blockquote>
</li>
<li>第二名称节点</li>
<li>数据节点    </li>
</ul>
</blockquote>
<p>HDFS存储原理：</p>
<blockquote>
<ul>
<li>冗余数据保存的问题</li>
<li>数据保存策略问题</li>
<li>数据恢复的问题<br>HDFS数据读写：</li>
<li>读写过程：<br><img src="https://img-blog.csdn.net/20160520174354336?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="数据读写过程" title="过程"></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop简介</title>
    <url>/2020/10/21/hadoop-introduction/</url>
    <content><![CDATA[<h1 id="hadoop简介"><a href="#hadoop简介" class="headerlink" title="hadoop简介"></a>hadoop简介</h1><p>1.定义：<br>hadoop是一个开源分布式计算平台，为用户提供了底层细节透明的分布式基础框架。<br>2.特性：    </p>
<ul>
<li>高可靠性    </li>
<li>高效性</li>
<li>高可扩展性</li>
<li>高容错性</li>
<li>成本低</li>
<li>运行在linux中</li>
<li>支持多种编程语言</li>
</ul>
<p>3.版本</p>
<ul>
<li>1.0</li>
<li>2.0</li>
</ul>
<p>4.hadoop结构</p>
<ul>
<li><img src="https://img-blog.csdnimg.cn/20191024090622860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZtMzQ1Njg5,size_16,color_FFFFFF,t_70" alt="图片展示" title="Hadoop项目结构图"></li>
<li>参考别人博客的<a href="https://blog.csdn.net/fm345689/article/details/102715230">文字记录</a></li>
</ul>
<p>5.Hadoop项目核心模块</p>
<ul>
<li>Hadoop Common：为Hadoop其他模块提供支持实用程序。</li>
<li>HDFS：提供对应用程序数据的高吞吐量访问</li>
<li>Hadoop YARN：作业调度和集群资源管理的框架</li>
<li>MapReduce：YARN系统的大型数据集并行处理技术</li>
</ul>
<p>6.Hadoop RPC工作原理</p>
<p>7.MapReduce工作原理</p>
<blockquote>
<ul>
<li>策略：分而治之</li>
<li>计算向数据靠拢而不是数据向计算靠拢</li>
</ul>
</blockquote>
<p>8.HDFS工作原理</p>
<p>9.YARN工作原理</p>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/22/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>shell介绍</title>
    <url>/2021/03/25/shell_introduction/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程基础</title>
    <url>/2021/04/20/multithreading/</url>
    <content><![CDATA[<h1 id="Java多线程"><a href="#Java多线程" class="headerlink" title="Java多线程"></a>Java多线程</h1><h2 id="1-程序，进程，线程"><a href="#1-程序，进程，线程" class="headerlink" title="1.程序，进程，线程"></a>1.程序，进程，线程</h2><blockquote>
<ul>
<li>程序：（可以执行的静态代码，是保存在硬盘上的一个文件）是为完成特定任务，用某种语言编写的一组指令的集合。即<em><strong>一段静态的代码</strong></em>，静态对象.</li>
<li>进程：（正在执行中的一个程序，在内存中处于激活状态，有生命周期）是程序的一次执行过程，或是<em><strong>正在运行的一个程序</strong></em>。动态过程：有它自身的产生、存在和消亡的过程</li>
<li>线程：（进程中的子任务）进程可以进一步细化为线程，是一个程序内部的一条执行路径</li>
</ul>
</blockquote>
<h2 id="2-Java中多线程的创建和使用"><a href="#2-Java中多线程的创建和使用" class="headerlink" title="2.Java中多线程的创建和使用"></a>2.Java中多线程的创建和使用</h2><blockquote>
<ul>
<li>实现Runnable接口与继承Thread类</li>
<li><h3 id="Thread类的主要方法"><a href="#Thread类的主要方法" class="headerlink" title="Thread类的主要方法"></a>Thread类的主要方法</h3><blockquote>
<ul>
<li>每个线程都是通过某个特定Thread对象的run()方法来完成操作的，经常把run()方法的主题称为线程体</li>
<li>通过该Thread对象的start()方法来调用这个线程</li>
<li>static Thread currentThread(),返回当前方法正在执行此方法所压入的栈的线程对象</li>
<li>void join()它的作用是调用此方法的另一个线程阻塞，当前线程执行完再执行另一个线程</li>
<li>static void sleep(long millis)作用是让当前线程（正在执行此方法的栈的线程）进入睡眠状态<blockquote>
<ul>
<li>两种方式结束sleep状态：1.时间到了。2.被其他进程打断 interrupt() 方法</li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
</li>
<li><h3 id="创建并启动线程的方式"><a href="#创建并启动线程的方式" class="headerlink" title="创建并启动线程的方式"></a>创建并启动线程的方式</h3></li>
<li><h4 id="实现Runnable的方式"><a href="#实现Runnable的方式" class="headerlink" title="实现Runnable的方式"></a>实现Runnable的方式</h4><blockquote>
<ol>
<li>写一个具体类，实现Runnable接口，并实现接口中的抽象方法run(),这个run方法就是线程体</li>
<li>创建这个具体类对象，并把这个对象作为实参，创建Thread线程对象</li>
<li>调用Thread线程对象的start方法</li>
</ol>
</blockquote>
</li>
<li><h4 id="继承Thread的方式"><a href="#继承Thread的方式" class="headerlink" title="继承Thread的方式"></a>继承Thread的方式</h4><blockquote>
<ol>
<li>写一个类，继承Thread,并重写run方法，此方法就是线程体</li>
<li>创建这个类的对象，相当于创建了线程对象</li>
<li>调用这个线程对象的start方法</li>
</ol>
</blockquote>
</li>
</ul>
</blockquote>
<h2 id="3-线程的同步"><a href="#3-线程的同步" class="headerlink" title="3.线程的同步"></a>3.线程的同步</h2><blockquote>
<ul>
<li>synchronized (lock){}</li>
<li>()中是一个锁对象，任意对象都可以做锁，称为互斥锁，作用是只允许一个线程进入执行，其他线程等待</li>
<li>具有原子性，不可分割</li>
<li>synchronized()可重入锁（同一个线程可以无限次获取同一个锁）</li>
<li>避免死锁：不要嵌套synchronized，即使有嵌套，锁对象尽量少</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Mapreduce介绍</title>
    <url>/2020/11/23/MapReduce/</url>
    <content><![CDATA[<p>#MapReduce介绍</p>
<blockquote>
<p><em><strong>1.mapreduce编程思想</strong></em></p>
<blockquote>
<ul>
<li>适用于数据密集型的应用</li>
<li>mapreduce 采用分而治之的策略<blockquote>
<ul>
<li>把非常庞大的数据集，切分成非常多独立的小分片</li>
<li>然后为每一个分片单独地启动一个map任务</li>
<li>最终通过多个map任务，并行地在多个机器上去处理</li>
</ul>
</blockquote>
</li>
<li>mapreduce计算向数据靠拢的理念<blockquote>
<ul>
<li>计算向数据靠拢而不是数据向计算靠拢</li>
</ul>
</blockquote>
</li>
<li>Master/Slave架构 <blockquote>
<ul>
<li>一个Master服务器–》作业跟踪器JobTracker–》负责整个作业的调度和处理以及失败和恢复</li>
<li>若干个Slave服务器–》负责具体任务执行的组件TaskTracker–》负责接收JobTracker给它发的作业处理指令，完成具体的任务处理</li>
</ul>
</blockquote>
</li>
<li>map 函数的作用：将输入的一个键值对进行处理生成一批的键值对</li>
<li>reduce函数的作用： 输入：&lt;key,list(value)&gt;,就是一个键以及一堆值的列表。输出：&lt;key,value&gt;</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<p><em><strong>2.mapreduce体系结构</strong></em></p>
<blockquote>
<ul>
<li>Client客户端<blockquote>
<ul>
<li>通过Client可以提交用户编写的应用程序用户通过它将应用程序交到JobTracker端</li>
<li>通过这些Client用户也可以通过它提供的一些接口去查看当前提交作业的运行状态</li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>JobTracker（作业跟踪器）<blockquote>
<ul>
<li>负责资源的监控和作业的调度</li>
<li>监控底层的其他TaskTracker以及当前运行的Job的健康状况</li>
<li>一旦探测到失败的情况就把这个任务转移到其它节点继续执行跟踪任务执行进度和资源使用量</li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>TaskTracker（任务调度器）<blockquote>
<ul>
<li>执行具体的相关任务一般接收JobTracker发送过来的命令</li>
<li>把一些自己的资源使用情况，以及任务的运行进度通过心跳的方式，也就是heartbeat发送给JobTracker（通过slot查看目前的资源使用情况。slot是一种资源调度单位，包括内存,CPU的资源）</li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>Task<blockquote>
<ul>
<li>map任务</li>
<li>reduce任务 </li>
</ul>
</blockquote>
</li>
<li><strong>3.mapreduce工程流程</strong>*</li>
<li>输入(分片操作)</li>
<li>Map任务（每个分片启动一个map任务）</li>
<li>Reduce任务</li>
<li>输出<br>shuffle 将map任务产生的中间结果（一系列的&lt;key,value&gt;）转换为 &lt;key,value-list&gt;<br>最优的Reduce任务个数取决于集群中可用的reduce任务槽（slot）的数目(一般比该数目稍小，这样可以预留一些系统资源处理可能发生的错误)</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<p><em><strong>4.shuffle过程解析</strong></em></p>
<blockquote>
<ul>
<li>Map端的Shuffle过程<blockquote>
<p>步骤：</p>
<ol>
<li>输入数据和执行Map任务</li>
<li>写入缓存</li>
<li>溢写（分区，排序，合并（要自己定义才执行））</li>
<li>文件归并</li>
</ol>
</blockquote>
</li>
<li>Reduce端的Shuffle过程 <blockquote>
<p>步骤：</p>
<ol>
<li>取数据</li>
<li>归并数据</li>
<li>把数据输入给Reduce任务</li>
</ol>
</blockquote>
</li>
</ul>
</blockquote>
<p><strong>MapReduce应用程序的执行过程：</strong><br>程序部署-》分配Map任务，分配Reduce任务-》读数据-》本地写数据-》远程读数据-》写数据<br><em><strong>5. mapreduce具体应用</strong></em> </p>
<blockquote>
<ul>
<li>关系代数运算 </li>
<li>分组聚合运算</li>
<li>矩阵乘法</li>
<li>矩阵运算</li>
<li>关系的自然连接</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<p><em><strong>6.mapreduce编程实践</strong></em></p>
</blockquote>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法介绍</title>
    <url>/2020/10/27/markdown-introduction/</url>
    <content><![CDATA[<h1 id="markdow语法的简单介绍"><a href="#markdow语法的简单介绍" class="headerlink" title="markdow语法的简单介绍"></a>markdow语法的简单介绍</h1><blockquote>
<ul>
<li>第一项：markdown标题  <blockquote>
<ul>
<li>用“#”号的个数来表示标题的级数</li>
</ul>
<ul>
<li>使用 = 和 - 标记一级和二级标题</li>
</ul>
</blockquote>
</li>
</ul>
<ul>
<li>第二项：段落格式<blockquote>
<ul>
<li>Markdown 段落没有特殊的格式<br>直接编写文字，<strong>段落的换行是使用两个以上空格加回车,也可以在段落后面使用一个空行来表示重新开始一个段落</strong>  </li>
</ul>
<ul>
<li><em><strong>字体：</strong></em><br>markdown可以使用斜体文本（一个<em>或_在文字的两边），粗体文本（两个</em>或_在文字的两边），粗斜体文本（三个）    </li>
</ul>
</blockquote>
</li>
<li>斜体文本*<br><em>斜体文本</em>    </li>
<li><em>粗体文本</em>*<br><strong>粗体文本</strong>    </li>
<li><strong>粗斜体文本</strong>*<br><em><strong>粗斜体文本</strong></em>    <blockquote>
<ul>
<li><em><strong>分隔线：</strong></em><br>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。    </li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
<hr>
<hr>
<hr>
<blockquote>
<blockquote>
<ul>
<li><em><strong>删除线：</strong></em><br>删除线： 如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可<br><del>删除线</del></li>
<li><strong>下划线：</strong><br>下划线可以通过 HTML 的 <u> 标签来实现</u><br><u>下划线</u></li>
<li><strong>脚注：</strong><br>脚注是对文本的补充说明。<br>创建脚注格式类似这样 [^RUNOOB]。<br>[^RUNOOB]: 菜鸟教程 – 学的不仅是技术，更是梦想！！！</li>
</ul>
</blockquote>
<ul>
<li>第三项：列表<br>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容     <blockquote>
<ul>
<li><strong>嵌套列表：</strong><br>列表嵌套只需在子列表中的选项前面添加四个空格即可    </li>
</ul>
</blockquote>
</li>
<li>第四项：<strong>区块</strong><br>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号<br>另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推<br>区块中可以使用列表，列表中也可以使用区块</li>
<li>第五项：<strong>markdown代码</strong><br><code>printf()</code>函数<br>如果是段落上的一个函数或片段的代码可以用反引号把它包起来(`)    <blockquote>
<ul>
<li>代码区块：<br>四个空格或者制表符（代码区块使用 4 个空格或者一个制表符（Tab 键）。）<br><img src="https://www.runoob.com/wp-content/uploads/2019/03/6DC89E5C-B41A-4938-97D8-D7D06B879F91.jpg" alt="展示" title="结果展示"><br>你也可以用 ``` 包裹一段代码，并指定一种语言（也可以不指定）    </li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c">include &lt;bits/stdc++.h&gt;    <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;hello world&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    <br>&#125;    <br></code></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><strong>第六项：Markdown 链接:</strong><br>参考<a href="https://www.runoob.com/markdown/md-tutorial.html">菜鸟教程</a></li>
<li><strong>第七项：markdown 表格</strong><br>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。  </li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>我们可以设置表格的对齐方式：</td>
<td></td>
</tr>
</tbody></table>
<pre><code>-: 设置内容和标题栏居右对齐。
:- 设置内容和标题栏居左对齐。
:-: 设置内容和标题栏居中对齐。
</code></pre>
<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">居中对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
</tbody></table>
<blockquote>
<ul>
<li><strong>第八项：markdown高级技巧</strong><br>参考连接<a href="https://www.runoob.com/markdown/md-advance.html">菜鸟教程</a></li>
</ul>
</blockquote>
<hr>
<hr>
<p>本文参考菜鸟教程的markdown教学，超链接上文已给出。（<a href="https://www.runoob.com/markdown/md-tutorial.html%EF%BC%89">https://www.runoob.com/markdown/md-tutorial.html）</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hbase简介</title>
    <url>/2020/11/17/HBase%20introduction/</url>
    <content><![CDATA[<p>#分布式数据库HBase简介</p>
<ol>
<li><p>概述    </p>
<ul>
<li>HBase是针对谷歌BigTable的开源实现，是一个高可靠，高性能，面向列，可伸缩的分布式数据库           </li>
<li>可以用来存储非结构化和半结构化的松散数据</li>
</ul>
</li>
<li><p>数据模型</p>
<ul>
<li>索引通过四个元素来定位：行键，列族，列限定符，时间戳</li>
<li> 面向列的存储</li>
</ul>
</li>
<li><p>实现原理 </p>
<ul>
<li>HBase的功能组件<blockquote>
<p>库函数<br>Master服务器<br>Region服务器    </p>
</blockquote>
</li>
<li>两个核心概念表和Region<blockquote>
<p>一个HBase表被划分成多个Region<br>一个Region会分裂成多个新的Region</p>
</blockquote>
</li>
<li>怎么实现Region定位<blockquote>
<p>三层结构索引实现Region的定位<br>Zookeeper文件<br>-ROOT-表<br>.MEAT.表      </p>
</blockquote>
</li>
</ul>
</li>
<li><p>运行机制</p>
<ul>
<li>HBase的系统架构<blockquote>
<p><img src="https://img-blog.csdnimg.cn/2020070104123335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTE1NDU1OQ==,size_16,color_FFFFFF,t_70#pic_center" title="系统架构图"><br>Zookeeper服务器（被大量用于分布式系统，提供配置维护，域名服务，分布式同步服务）实现协同管理服务，提供管家功能（维护和管理整个HBase集群）<br>Master服务器作用：1.对表增删改查。2.负责不同Region服务器的负载均衡。3.负责调整分裂合并后Region的分布。4.负责重新分配故障，失效的Region服务器</p>
</blockquote>
</li>
<li>Region服务器（负责用户数据的存储和管理）的工作原理</li>
<li>Store的工作原理</li>
<li>HLog的工作原理</li>
</ul>
</li>
<li><p>编程实践<br>HBase安装及实践，参考厦门大学数据库实验室博客<br><a href="http://dblab.xmu.edu.cn/blog/2442-2/">参考链接</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
</search>
